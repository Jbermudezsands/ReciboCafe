<?xml version="1.0"?>
<doc>
  <assembly>
    <name>C1.Win.C1Report.2</name>
  </assembly>
  <members>
    <member name="T:C1.Win.C1Report.DataSource">
      <summary>
            Provides data for reports.
            </summary>
      <remarks>
        <para>Most reports specify their data sources by setting the <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> and 
            <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> properties. The <b>DataSource</b> object uses these values to connect
            to a database and retrieve the report data.</para>
        <para>Alternatively, you can assign data objects directly to the <see cref="P:C1.Win.C1Report.DataSource.Recordset" /> property.
            This approach is more efficient in scenarios where the data has already been loaded by the 
            application for other purposes, and can be used in the report directly instead of loading a copy.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.GetRecordSource(System.Boolean)">
      <summary>
            Processes the <b>PARAMETERS</b> clause in the <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> string and returns the result.
            </summary>
      <remarks>
        <para>This property is related to the <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property. 
            The <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property sets or returns a string that specifies the source 
            dataset for the report, and it may contain a <b>PARAMETERS</b> clause that causes <see cref="T:C1.Win.C1Report.C1Report" /> 
            to prompt the user for information.</para>
        <para>If you wanted to use the value of the <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property to open a dataset 
            directly from your program, you would have to parse the <b>PARAMETERS</b> clause yourself.</para>
      </remarks>
      <param name="prompt">If set to true, user will be prompted for the parameters 
            before the method returns. If set to false, the default values will be used.</param>
      <returns>The string (SQL statement or table name) that can be used to open a recordset.</returns>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.ToString">
      <summary>
            Returns a string representation of <see cref="T:C1.Win.C1Report.DataSource" /> object.
            </summary>
      <returns>The value of <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property if supplied by the user,
            or "(none)" otherwise.</returns>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.GetFieldValue(System.Int32)">
      <summary>
            Gets the value of the given field, at the cursor position.
            </summary>
      <param name="fieldIndex">Index of the field.</param>
      <returns>Value of the field.</returns>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.BOF">
      <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.EOF">
      <summary>
            Returns true if the cursor is pointing at the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.MoveFirst">
      <summary>
            Moves the cursor to the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.MoveLast">
      <summary>
            Moves the cursor to the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.MovePrevious">
      <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.MoveNext">
      <summary>
            Moves the cursor to the next record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.GetBookmark">
      <summary>
            Returns the current cursor position.
            </summary>
      <returns>Index of current record.</returns>
    </member>
    <member name="M:C1.Win.C1Report.DataSource.SetBookmark(System.Int32)">
      <summary>
            Sets the current cursor position to supplied value.
            </summary>
      <param name="bkmk">Index of record.</param>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.ConnectionString">
      <summary>
            Gets or sets the string used to open a database.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> is used by the <see cref="T:C1.Win.C1Report.DataSource" /> class to load the report data.</para>
        <para>The <see cref="T:C1.Win.C1Report.DataSource" /> class uses an <see cref="T:System.Data.OleDb.OleDbConnection" /> object to retrieve the data, 
            so the syntax for the <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> is the one used OleDb connection strings. For details on 
            the syntax, see the documentation for the <see cref="T:System.Data.OleDb.OleDbConnection" /> class.</para>
        <para>The <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> specifies the database that contains the report data. 
            The <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property specifies which table, stored procedure, or Sql command to use for 
            retrieving the data.</para>
        <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection" />,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable" /> object, you can assign the data 
            directly to the <see cref="P:C1.Win.C1Report.DataSource.Recordset" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.RecordSource">
      <summary>
            Gets or sets a string that specifies which table, stored procedure, or Sql command
            to use for retrieving the report data.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> specifies the database that contains the report data. 
            The <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property specifies which table, stored procedure, or Sql command to use for 
            retrieving the data.</para>
        <para>If you want to use a different type of connection (e.g. a <see cref="T:System.Data.SqlClient.SqlConnection" />,
            or if your application already has the data available in a <see cref="T:System.Data.DataTable" /> object, you can assign the 
            data directly to the <see cref="P:C1.Win.C1Report.DataSource.Recordset" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.Filter">
      <summary>
            Gets or sets the expression used to filter which data rows are included in the report.
            </summary>
      <remarks>
        <para>Use the <b>Filter</b> property to restrict the records that you want to include in a 
            report without modifying the <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property.</para>
        <para>Using a filter is similar to specifying a WHERE clause in the SQL statement assigned to
            the <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property. Both techniques will filter the data according to the
            condition specified. The difference is that the <b>Filter</b> property is applied to a table
            that has already been loaded in memory, while the WHERE statement causes only the filtered
            records to be loaded from the database into memory.</para>
        <para>When creating reports that include only small subsets large tables, the WHERE statement
            is a better option, because it doesn't require the entire table to be loaded into memory.
            On the other hand, if the table has already been loaded in memory, the <b>Filter</b> property
            is a better option, since it does not require any additional data to be loaded.</para>
        <para>The syntax for the filter expression is the same used to specify the <see cref="P:System.Data.DataView.RowFilter" />
            property for <see cref="T:System.Data.DataView" /> objects. The expressions consist of conditions in the form
            <i>ColumnName</i><i>Operator</i><i>Value</i>, where <i>ColumnName</i> is the name of a column in 
            the data source (optionally enclosed in square brackets), <i>Operator</i> is one of the regular 
            Visual Basic comparison operators, and <i>Value</i> is a literal enclosed in single quotes. Conditions
            may be concatenated using <b>AND</b> and <b>OR</b> operators.</para>
      </remarks>
      <example>
            The code below shows how to apply a filter to a data source using the <c>Filter</c> property and
            using a WHERE clause in a SQL statement:
            <code>
            if (useFilterProperty)
            {
            	// load all records, filter in memory
                _c1r.DataSource.RecordSource = "SELECT * from Employees";
                _c1r.DataSource.Filter = "HireDate &gt;= '1/1/1993' AND Country = 'UK'";
            }
            else
            {
            	// load selected records only
                _c1r.DataSource.RecordSource = "SELECT * from Employees " +
                    "WHERE HireDate &gt;= #1/1/1993# AND Country = 'UK'";
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.MaxRecords">
      <summary>
            Gets or sets the maximum number of data rows to be included in the report (set to zero to include all rows).
            </summary>
      <remarks>
        <para>This property is useful if you want to limit the size of a report. For example, you may write a report 
            designer with a preview window that shows only the first 500 records from the database.</para>
        <para>Setting this property to zero causes the control to retrieve all records.</para>
        <para>You can also limit the size of reports by setting the <see cref="P:C1.Win.C1Report.C1Report.MaxPages" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.Recordset">
      <summary>
            Sets or gets the data source object that provides data to the report.
            </summary>
      <remarks>
        <para>Usually, the control creates a <see cref="T:System.Data.DataTable" /> object based on the value of the 
            <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> and <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> properties, and uses that object 
            as the report data source.</para>
        <para>Alternatively, you may want to create the data source object yourself, and assign it to 
            the control. You can do that by assigning your data source object to the <b>Recordset</b>
            property.</para>
        <para>When a <b>DataTable</b> or <b>DataView</b> object is assigned to the <b>Recordset</b>
            property, C1Report automatically creates an internal wrapper class that implements 
            the <see cref="T:C1.Win.C1Report.IC1ReportRecordset" /> interface. Because of this, you can't get the original
            <b>DataTable</b> or <b>DataView</b> objects back by reading the property value. Instead,
            you must cast the wrapper object to an <see cref="T:System.ComponentModel.IListSource" /> and use the 
            <see cref="M:System.ComponentModel.IListSource.GetList" /> method instead, as shown in the example below.</para>
        <value>
            You can assign objects of the following types to the <see cref="P:C1.Win.C1Report.DataSource.Recordset" /> property:
            (1) <see cref="T:System.Data.DataTable" /> objects, (2) <see cref="T:System.Data.DataView" /> objects, or (3) any 
            object that implements the <see cref="T:C1.Win.C1Report.IC1ReportRecordset" /> interface.
            </value>
      </remarks>
      <example>
        <code>
            // create a DataTable
            DataTable dt = new DataTable("my table");
            
            // assign it to c1report
            // automatically creates IC1ReportRecordset wrapper
            c1r.DataSource.Recordset = dt;
            
            // 1) this doesn't work (dbBad == null)
            object wrapper = c1Report1.DataSource.Recordset;
            DataTable dtBad = wrapper as DataTable;
            
            // 2) this does (dtGood == dt)
            DataView dv = ((IListSource)wrapper).GetList() as DataView;
            DataTable dtGood = dv.Table;
            </code>
      </example>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.CommandTimeOut">
      <summary>
            Gets or sets the number of seconds to wait before the data connection times out 
            (set to -1 to use the default value, usually 30s).
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.DataSource.ParentReport">
      <summary>
            Gets the report that contains this <see cref="T:C1.Win.C1Report.DataSource" />.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Design.ExpressionEditor">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> used to edit VBScript expressions.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.ExpressionEditor" /> shows a modal dialog that allows users to enter <b>VBScript</b> 
            expressions.</para>
        <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor" /> in classes that derive from <see cref="T:C1.Win.C1Report.Field" /> 
            to provide VBScript expression editing.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.ExpressionEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.ExpressionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns <b>UITypeEditorEditStyle.Modal</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.ExpressionEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the value of the specified object.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>A string containing the new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.StatementEditor">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> used to edit VBScript statements.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.StatementEditor" /> shows a modal dialog that allows users to enter <b>VBScript</b> 
            statements.</para>
        <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor" /> in classes that derive from <see cref="T:C1.Win.C1Report.Field" /> 
            to provide VBScript statement editing.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.StatementEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.StatementEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns <b>UITypeEditorEditStyle.Modal</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.StatementEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the value of the specified object.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>A string containing the new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.DataSourceEditor">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> used to edit <see cref="T:C1.Win.C1Report.DataSource" /> properties.
            </summary>
      <remarks>
            This editor calls a delegate on the report object. Report designers can provide a delegate and show 
            their custom UI to use for editing the data source.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.DataSourceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="M:C1.Win.C1Report.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.DataSourceEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by <see cref="M:C1.Win.C1Report.Design.DataSourceEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>The new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.LayoutEditor">
      <summary>
            Shows a page setup dialog where the use can pick the paper size, orientation, and margins.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Design.LayoutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.LayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates 
            the style of editor used by <see cref="M:C1.Win.C1Report.Design.LayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.LayoutEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the specified object's value using the editor style indicated by <see cref="M:C1.Win.C1Report.Design.LayoutEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)" />.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> that this editor can use to obtain services.</param>
      <param name="value">The object to edit.</param>
      <returns>The new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.PageUnitConverter">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> used to edit measurements.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.PageUnitConverter" /> converts units (in, ", pt, pix, cm, mm) into 
            twips. For example, if the user types "2in" into the property grid, the 
            converter will automatically convert that into 2880 twips).</para>
        <para>You can use this <see cref="T:System.ComponentModel.TypeConverter" /> in classes that derive from
            <see cref="T:C1.Win.C1Report.Field" /> to provide properties that represent measurements.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.PageUnitConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given value to the type of this converter.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>A <see cref="T:System.Double" /> value that represents the converted value expressed in twips.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.FormatConverter">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> used to edit formatting strings.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.FormatConverter" /> provides a list of commonly used formatting strings.
            The user can select one or type his own.</para>
        <para>You can use this <see cref="T:System.ComponentModel.TypeConverter" /> in classes that derive from
            <see cref="T:C1.Win.C1Report.Field" /> to provide properties that represent formatting strings.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns true to indicate that this object supports a standard set of values that can be picked from a list.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns false to indicate that the collection of standard values returned from <see cref="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> 
            is not an exclusive list (the user can type custom formats that are not on the list).
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.FormatConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns a collection of standard formats.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>A list containing the most common formatting strings.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.TextAlignEditor">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> used to edit text alignment properties 
            (properties of type <see cref="T:C1.Win.C1Report.FieldAlignEnum" />).
            </summary>
      <remarks>
        <para>This editor shows a drop-down control that allows users to visually select text alignment options.</para>
        <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor" /> in classes that derive from <see cref="T:C1.Win.C1Report.Field" /> to provide 
            text alignment editing.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.TextAlignEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.TextAlignEditor" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Design.TextAlignEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.TextAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.TextAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the value of the specified object.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>A <see cref="T:C1.Win.C1Report.FieldAlignEnum" /> value containing the new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.PictureAlignEditor">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> used to edit image alignment properties 
            (properties of type <see cref="T:C1.Win.C1Report.PictureAlignEnum" />).
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.PictureAlignEditor" /> shows a drop-down control that allows users to visually select 
            image alignment options.</para>
        <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor" /> in classes that derive from <see cref="T:C1.Win.C1Report.Field" /> to 
            provide image alignment editing.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.PictureAlignEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.PictureAlignEditor" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Design.PictureAlignEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.PictureAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.PictureAlignEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the value of the specified object.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>A <see cref="T:C1.Win.C1Report.PictureAlignEnum" /> value containing the new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.TextFieldEditor">
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> that provides a list of available text field names plus the option to type in an 
            expression using a script editor.
            </summary>
      <summary>
        <see cref="T:System.Drawing.Design.UITypeEditor" /> used to edit properties that represent report field names.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.TextFieldEditor" /> shows a drop-down list that allows users to select report field names.</para>
        <para>The list includes a (Script Editor...) option that shows a dialog where the user can type complex expressions.</para>
        <para>You can use this <see cref="T:System.Drawing.Design.UITypeEditor" /> in classes that derive from <see cref="T:C1.Win.C1Report.Field" /> to provide properties 
            that should be set to report field names.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.TextFieldEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.TextFieldEditor" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Design.TextFieldEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.TextFieldEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>Always returns <b>UITypeEditorEditStyle.DropDown</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.TextFieldEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the value of the specified object.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>A string containing the new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.SubreportFieldConverter">
      <summary>
        <see cref="T:System.ComponentModel.TypeConverter" /> used to edit properties that represent reports.
            </summary>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.Design.SubreportFieldConverter" /> provides a list of available reports.</para>
        <para>You can use this <see cref="T:System.ComponentModel.TypeConverter" /> in classes that derive from <see cref="T:C1.Win.C1Report.Field" /> to 
            edit properties that represent reports.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.CanConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert an object of one type to the type of this converter.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="type">A <see cref="T:System.Type" /> that represents the type you want to convert from.</param>
      <returns>True if <paramref name="type" /> is string, false otherwise.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.ConvertFrom(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object)">
      <summary>
            Converts the given value to the type of this converter.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <returns>A <see cref="T:C1.Win.C1Report.C1Report" /> object with the specified name, or null if no report by the specified name 
            could be found in the report definition file.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)">
      <summary>
            Returns whether this converter can convert the object to the specified type.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="type">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>True if <paramref name="type" /> is string, false otherwise.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)">
      <summary>
            Converts the given value object to the specified type.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="ci">The <see cref="T:System.Globalization.CultureInfo" /> to use as the current culture.</param>
      <param name="value">The <see cref="T:System.Object" /> to convert.</param>
      <param name="type">A <see cref="T:System.Type" /> that represents the type you want to convert to.</param>
      <returns>The name of the report if <paramref name="type" /> is string, null otherwise.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValuesSupported(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns whether this object supports properties, using the specified context.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <returns>True because <see cref="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> should be called to find the properties of this object.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValuesExclusive(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns whether the collection of standard values returned from 
            <see cref="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> is an exclusive list of possible values, 
            using the specified context.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context.</param>
      <returns>True because the <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> returned 
            from <see cref="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)" /> is an exhaustive list of possible values.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.SubreportFieldConverter.GetStandardValues(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Returns a collection of report names.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that provides a format context that can be 
            used to extract additional information about the environment from which this converter is invoked. 
            This parameter or properties of this parameter can be a null reference (Nothing in Visual Basic).</param>
      <returns>A <see cref="T:System.ComponentModel.TypeConverter.StandardValuesCollection" /> that holds a standard set of valid values.</returns>
    </member>
    <member name="T:C1.Win.C1Report.Design.PictureHolderEditor">
      <summary>
            PictureHolderEditor provides a list of available text image names plus the option to load an image from a file.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Design.PictureHolderEditor.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Design.PictureHolderEditor" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Design.PictureHolderEditor.GetEditStyle(System.ComponentModel.ITypeDescriptorContext)">
      <summary>
            Gets the editor style used by the <see cref="M:C1.Win.C1Report.Design.PictureHolderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" /> method.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <returns>A <see cref="T:System.Drawing.Design.UITypeEditorEditStyle" /> value that indicates the style of editor used by <see cref="M:C1.Win.C1Report.Design.PictureHolderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)" />.</returns>
    </member>
    <member name="M:C1.Win.C1Report.Design.PictureHolderEditor.EditValue(System.ComponentModel.ITypeDescriptorContext,System.IServiceProvider,System.Object)">
      <summary>
            Edits the value of the specified object.
            </summary>
      <param name="ctx">An <see cref="T:System.ComponentModel.ITypeDescriptorContext" /> that can be used to gain additional context information.</param>
      <param name="provider">An <see cref="T:System.IServiceProvider" /> through which editing services may be obtained.</param>
      <param name="value">An instance of the value being edited.</param>
      <returns>A string containing the new value of the object.</returns>
    </member>
    <member name="T:C1.Win.C1Report.C1dFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into C1printDocument 
            streams or files. 
            </summary>
      <remarks>
            Creating a <b>C1dFilter</b> and using it in a call to <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> is similar to 
            using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" /> methods,
            but offers some extra flexibility because you can set properties on the <b>C1dFilter</b> before calling 
            <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Report.ExportFilter">
      <summary>
            Base class for all export filters, used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render 
            reports into different formats.
            </summary>
      <remarks>
        <para>
          <b>ExportFilter</b> is an abstract class used as a base class for all the built-in export filter classes, 
            <see cref="T:C1.Win.C1Report.HtmlFilter" />, <see cref="T:C1.Win.C1Report.PdfFilter" />, <see cref="T:C1.Win.C1Report.RtfFilter" />, <see cref="T:C1.Win.C1Report.XlsFilter" />, 
            <see cref="T:C1.Win.C1Report.TextFilter" />, and <see cref="T:C1.Win.C1Report.TiffFilter" />.</para>
        <para>You can write your own export filters by deriving from <b>ExportFilter</b>.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.ExportFilter" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.Dispose">
      <summary>
            Releases the resources used by the filter.
            </summary>
      <remarks>
            Override this method in derived classes to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.StartSection(C1.Win.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The <see cref="T:C1.Win.C1Report.Section" /> to render.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.Win.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.EndSection(C1.Win.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
      <param name="section">
        <see cref="T:C1.Win.C1Report.Section" /> that was rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.ExportFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
      <remarks>
        <para>Overlay fields are used only in reports that contain calculated fields which use the <b>Pages</b>
            property.</para>
        <para>This value is not known until the report has been generated, and is therefore rendered on a second pass.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.AddOutlineEntry(System.String,System.Int32,System.Double,System.Double)">
      <summary>
            Called when the component renders the beginning of a report group. 
            </summary>
      <param name="heading">Outline header.</param>
      <param name="level">Outline level.</param>
      <param name="x">Left position of the outline, in twips.</param>
      <param name="y">Top position of the outline, in twips.</param>
      <remarks>
            This method allows the filter to build a report outline.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.Win.C1Report.ExportFilter.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.Win.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.Win.C1Report.ExportFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter requires page images to be generated.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.Win.C1Report.C1Report" /> will render the report into the filter 
            and also into its own <see cref="P:C1.Win.C1Report.C1Report.PageImages" /> collection.</para>
        <para>Some filters use these images to generate their output (e.g. PDF, TIFF). Other filters 
            don't need the images (e.g. HTML, RTF) and therefore this method returns false, which saves some 
            resources while rendering long reports.</para>
      </remarks>
      <returns>True if the filter requires page images.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.C1dFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.C1dFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.#ctor(System.String,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.C1dFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
      <param name="embedFonts">If set to true, font information will be embedded into
            the document.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.#ctor(System.IO.Stream,System.Boolean)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.C1dFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
      <param name="embedFonts">If set to true, font information will be embedded into
            the document.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.Win.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.StartSection(C1.Win.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The <see cref="T:C1.Win.C1Report.Section" /> to render.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.EndSection(C1.Win.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
      <param name="section">
        <see cref="T:C1.Win.C1Report.Section" /> that was rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.AddOutlineEntry(System.String,System.Int32,System.Double,System.Double)">
      <summary>
            Called when the component renders the beginning of a report group. 
            </summary>
      <param name="heading">Outline header.</param>
      <param name="level">Outline level.</param>
      <param name="x">Left position of the outline, in twips.</param>
      <param name="y">Top position of the outline, in twips.</param>
      <remarks>
            This method allows the filter to build a report outline.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.C1dFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1dFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1dFilter.EmbedFonts">
      <summary>
            Gets or sets the value indicating whether the true type fonts
            used in the report will be embedded in the resulting .c1d file
            (only the actually used glyphs from the fonts are embedded).
            </summary>
      <remarks>
        <para>Embedding font information makes the document substantially larger, but it allows the file to be 
            viewed faithfully in systems that don't have all the necessary fonts installed.</para>
        <para>Embedding fonts is not necessary if the target systems have the necessary <b>TrueType</b>
            fonts installed.</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.HtmlFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into HTML streams or files. 
            </summary>
      <remarks>
            Creating an <b>HtmlFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>HtmlFilter</b> object
            before calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Contains the name of the file to be created. 
            If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
      <param name="idPrefix">A unique report identifier used to avoid duplicate style names 
            when adding several reports to the same HTML stream.</param>
      <param name="fileName">Path and template of file name for member files (pictures etc).</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.Win.C1Report.HtmlFilter.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.Win.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <remarks>
        <para>By default, C1Report will render the report into the filter and also into its own 
            <see cref="P:C1.Win.C1Report.C1Report.PageImages" /> collection. </para>
        <para>
          <see cref="T:C1.Win.C1Report.HtmlFilter" /> doesn't need the images and therefore this method always 
            returns false, which saves some resources while rendering long reports.</para>
      </remarks>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.HtmlFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.StartSection(C1.Win.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The section being rendered.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.EndSection(C1.Win.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each section.
            </summary>
      <param name="section">Section that was rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
      <param name="field">The field to be rendered.</param>
      <param name="rc">Rectangle that determines the field position on the current page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
      <remarks>
        <para>Overlay fields are used only in reports that contain calculated fields which use 
            the <b>Pages</b> variable.</para>
        <para>This value is not known until the report has been generated, and is therefore 
            rendered on a second pass.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.HtmlFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.HtmlFilter.Paged">
      <summary>
            Specifies whether the filter should produce a continuous 
            report into a single HTML file or a paged report into a set of HTML files.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.HtmlFilter.MultiFile">
      <summary>
            Specifies whether the built-in HTML filter should break paged reports 
            into multiple HTML files (one per page).
            </summary>
      <remarks>
            Set this property to false to create a single HTML file containing all pages, 
            with &lt;BR&gt; elements at the page breaks.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.HtmlFilter.DrillDown">
      <summary>
            Specifies whether the user should be able to expand and collapse groups by clicking on their header sections.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.HtmlFilter.StartCollapsed">
      <summary>
            Specifies whether <see cref="P:C1.Win.C1Report.HtmlFilter.DrillDown" /> reports should be initially displayed in a collapsed state.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.HtmlFilter.EncodeHtml">
      <summary>
            Specifies whether field contents should be encoded or rendered in raw format. 
            This property allows you to render fields that contain HTML formatting.
            </summary>
      <remarks>
        <para>By default, field contents are encoded, so a field containing the string "A&lt;B&gt;C" 
            would be rendered as "A&amp;lt;B&amp;gt;C", which would appear as the original string 
            in the browser.</para>
        <para>If you set <see cref="P:C1.Win.C1Report.HtmlFilter.EncodeHtml" /> to False, the same string would be rendered in 
            raw format, causing the browser to display it as "A&lt;B&gt;C" (the "C" would be bold).</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.HtmlTableFilter">
      <summary>
            Class is used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into 
            table-based HTML streams or files. 
            </summary>
      <remarks>
        <para>This filter is similar to the plain <see cref="T:C1.Win.C1Report.HtmlFilter" />, except if generates reports
            based on TABLE tags as opposed to absolutely-positioned DIV tags. The resulting files are 
            usually less accurate than the ones created with the plain DIV-based <see cref="T:C1.Win.C1Report.HtmlFilter" />,
            but they have three significant advantages:</para>
        <para>1) TABLE-based reports are easier to edit in regular HTML editors. You can easily insert rows for example.</para>
        <para>2) TABLE-based reports support clipboard operations better. For example, you can copy report sections 
            in the browser and paste them into Excel.</para>
        <para>3) TABLE-based reports support vertical alignment within fields.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Contains the name of the file to be created. 
            If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.#ctor(System.IO.Stream,System.String,System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.HtmlFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output stream where the report will be rendered.</param>
      <param name="idPrefix">A unique report identifier used to avoid duplicate style names 
            when adding several reports to the same HTML stream.</param>
      <param name="fileName">Path and template of file name for member files (pictures etc).</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.StartSection(C1.Win.C1Report.Section,System.Double,System.Double)">
      <summary>
            Called when the component starts rendering a section.
            </summary>
      <param name="section">The section being rendered.</param>
      <param name="x">Left position of the section, in twips.</param>
      <param name="y">Top position of the section, in twips.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.EndSection(C1.Win.C1Report.Section)">
      <summary>
            Called when the component finishes rendering each section.
            </summary>
      <param name="section">Section that was rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.HtmlTableFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
      <param name="field">The field to be rendered.</param>
      <param name="rc">Rectangle that determines the field position on the current page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="T:C1.Win.C1Report.PdfFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into PDF (portable document format)
            streams or files. 
            </summary>
      <remarks>
            Creating a <b>PdfFilter</b> and using it in a call to <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> is similar to 
            using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" /> methods, 
            but offers some extra flexibility because you can set properties on the <b>PdfFilter</b> before calling 
            <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.PdfFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.PdfFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.PdfFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.PdfFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.PdfFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.PdfFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.PdfFilter.EmbedFonts">
      <summary>
            Specifies whether the filter should embed font information into the PDF output.
            </summary>
      <remarks>
        <para>Embedding font information makes the PDF document substantially larger, but it allows the file to be 
            viewed faithfully in systems that don't have all the necessary fonts installed.</para>
        <para>Embedding fonts is not necessary if the target systems have the necessary <b>TrueType</b>
            fonts installed.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.PdfFilter.Password">
      <summary>
            Gets or sets the owner password associated with the PDF document. 
            </summary>
      <remarks>
        <para>The owner password is required for making changes to the document.</para>
        <para>By default, the password is set to an empty string, which means anyone can open and edit the PDF document.</para>
        <para>The <see cref="T:C1.Win.C1Report.PdfFilter" /> never sets the user password for the file, which means 
            anyone can open and view the PDF document.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.PdfFilter.Outline">
      <summary>
            Specifies whether the PDF output should include an outline tree. 
            </summary>
      <remarks>
        <para>The outline tree is created automatically based on the report groups and 
            can be used to navigate through the report in the Adobe Acrobat viewer.</para>
        <para>Each node in the tree corresponds to a group header section in the report.
            Invisible group header sections do not generate outline entries in the PDF document.</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.RtfTargetEnum">
      <summary>
            Specifies the format of the export file.
            </summary>
      <remarks>Use the members of this enumeration to set 
            <see cref="P:C1.Win.C1Report.RtfFilter.RtfTarget" /> property of the <see cref="T:C1.Win.C1Report.RtfFilter" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.RtfTargetEnum.Portable">
      <summary>
            This setting creates RTF content that can be viewed in Microsoft Word, 
            WordPad and RichTextBox.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.RtfTargetEnum.MSWord">
      <summary>
            This setting creates RTF content that can be viewed in Microsoft Word. 
            It is useful for exporting high quality images. Documents with such images 
            are significantly larger than with images in Portable format.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.RtfFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into RTF (rich text format)
            streams or files. 
            </summary>
      <remarks>
            Creating an <b>RtfFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method 
            is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>RtfFilter</b>
            before calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <returns>Always returns true.</returns>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.Win.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.RtfFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.RtfFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.RtfFilter.EmbedPictures">
      <summary>
            Specifies whether filter should embed images in the RTF document. 
            </summary>
      <remarks>
            Documents with embedded images are significantly larger than text-only documents.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.RtfFilter.RtfTarget">
      <summary>
            Gets or sets the format used to export images. 
            </summary>
      <seealso cref="T:C1.Win.C1Report.RtfTargetEnum" />
    </member>
    <member name="T:C1.Win.C1Report.RtfLabelFilter">
      <summary>
            Class is used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into RTF
            (rich text format) streams or files. 
            </summary>
      <remarks>
        <para>This filter is similar to the plain <see cref="T:C1.Win.C1Report.RtfFilter" />, except if generates RTF fields with
            absolute positioning. The resulting files are more accurate than the ones created with the plain RTF
            filter, but they are harder to edit and can only be opened in Microsoft Word (WordPad and other simple
            editors do not support RTF absolute positioning).</para>
        <para>Creating an <b>RtfLabelFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method 
            is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>RtfLabelFilter</b>
            before calling <b>RenderToFilter</b>.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.RtfLabelFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfLabelFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.RtfLabelFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.RtfLabelFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.RtfLabelFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a 
            specific position on the current page.
            </summary>
      <param name="field">The field to be rendered.</param>
      <param name="rc">Rectangle that determines the field position on the current page, 
            in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="T:C1.Win.C1Report.TextFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into plain text streams or files. 
            </summary>
      <remarks>
            Creating a <b>TextFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>TextFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TextFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TextFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <remarks>
        <para>When generating paged reports, the component calls the filter's <see cref="M:C1.Win.C1Report.TextFilter.NewPage" />
            method on page breaks and updates the value of the <see cref="P:C1.Win.C1Report.C1Report.Page" /> property.</para>
        <para>When generating non-paged (continuous) reports, only one long page is generated.</para>
      </remarks>
      <returns>True if report is paged.</returns>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.Win.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.NewPage">
      <summary>
            Called after each page break on paged reports (see the <see cref="M:C1.Win.C1Report.TextFilter.IsPaged" /> property).
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.StartOverlays">
      <summary>
            Called after the component has finished rendering the first pass of the report, 
            and before it starts rendering overlay fields. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.TextFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.TextFilter.Paged">
      <summary>
            Specifies whether the filter should produce a continuous report or a report with
            page break characters and page header and footer sections.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.TiffFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into TIFF streams or files. 
            </summary>
      <remarks>
            Creating a <b>TiffFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" />
            method is similar to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> or <see cref="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)" />
            methods, but offers some extra flexibility because you can set properties on the <b>TiffFilter</b> before
            calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.TiffFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TiffFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created. If the file already exists, it will be overwritten.</param>
    </member>
    <member name="M:C1.Win.C1Report.TiffFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.TiffFilter" /> class attached to a stream.
            </summary>
      <param name="stream">Output <see cref="T:System.IO.Stream" /> where the report will be rendered.</param>
    </member>
    <member name="M:C1.Win.C1Report.TiffFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.TiffFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.TiffFilter.Resolution">
      <summary>
            Gets or sets the resolution of the TIFF document, in dots per inch. 
            </summary>
      <remarks>
        <para>The default value for this property is 300 DPI.</para>
        <para>Setting the resolution to higher values result in documents with higher quality
            but significantly larger size, especially if the <see cref="P:C1.Win.C1Report.TiffFilter.Monochrome" /> property
            is set to false.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.TiffFilter.Monochrome">
      <summary>
            Gets or sets whether the TIFF document should be saved in monochrome format.
            </summary>
      <remarks>
        <para>The default value for this property is true, which results in much smaller documents that are compatible
            with fax machines (the compression used is CompressionCCITT4).</para>
        <para>Set this property to false to generate color documents which use LZW compression but are substantially 
            larger than monochrome documents (often 100 times larger using the same resolution).</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.MetafileFilter">
      <summary>
            Used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method to render reports into compressed metafile files. 
            </summary>
      <remarks>
            This filter creates zip files containing one metafile for each report page.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.MetafileFilter.#ctor(System.String)">
      <summary>
            Creates a new instance of the <see cref="T:C1.Win.C1Report.MetafileFilter" /> class.
            </summary>
      <param name="fileName">Name of the zip file that will contain the report metafiles.</param>
    </member>
    <member name="M:C1.Win.C1Report.MetafileFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.MetafileFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.MetafileFilter.MetafileType">
      <summary>
            Gets or sets the type of metafile this <see cref="T:C1.Win.C1Report.MetafileFilter" /> will generate.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.FieldAlignEnum">
      <summary>
            Specifies the alignment of text within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.Align" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.General">
      <summary>
            Align numbers to the right, other values to the left.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.RightTop">
      <summary>
            Align to the right and to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.JustTop">
      <summary>
            Justify and align to the top of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.JustBottom">
      <summary>
            Justify and align to the bottom of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FieldAlignEnum.JustMiddle">
      <summary>
            Justify and align to the middle of the field box.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.PictureAlignEnum">
      <summary>
            Specifies the alignment of images within the field's rectangle.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the 
            <see cref="P:C1.Win.C1Report.Field.PictureAlign" /> and <see cref="P:C1.Win.C1Report.Layout.PictureAlign" /> properties 
            in the <see cref="T:C1.Win.C1Report.Field" /> and <see cref="T:C1.Win.C1Report.Layout" /> classes.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.LeftTop">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.CenterTop">
      <summary>
            Align to the center and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.RightTop">
      <summary>
            Align to the right and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.LeftBottom">
      <summary>
            Align to the left and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.CenterBottom">
      <summary>
            Align to the center and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.RightBottom">
      <summary>
            Align to the right and to the bottom, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.LeftMiddle">
      <summary>
            Align to the left and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.CenterMiddle">
      <summary>
            Align to the center and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.RightMiddle">
      <summary>
            Align to the right and to the middle, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.Clip">
      <summary>
            Align to the left and to the top, clipping if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.Zoom">
      <summary>
            Scale the picture to use as much of the page as possible, 
            while preserving the picture's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.Stretch">
      <summary>
            Stretch the picture to fill the page.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureAlignEnum.Tile">
      <summary>
            Tile the picture to fill the page.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.PictureScaleEnum">
      <summary>
            Specifies the scaling of images within the field's rectangle.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Field.PictureScale" /> 
            and <see cref="P:C1.Win.C1Report.Layout.PictureScale" /> properties in the <see cref="T:C1.Win.C1Report.Field" /> and <see cref="T:C1.Win.C1Report.Layout" /> classes.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.PictureScaleEnum.Clip">
      <summary>
            Use the image's original size, clipping it to the display area if necessary.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureScaleEnum.Stretch">
      <summary>
            Stretch the picture to fill the display area. 
            This mode will usually change the image's aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureScaleEnum.Scale">
      <summary>
            Scale the picture to fit the display area. 
            This mode may increase or reduce the size of the image 
            while maintaining its aspect ratio.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureScaleEnum.Tile">
      <summary>
            Tile the picture to fill the display area.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureScaleEnum.Hide">
      <summary>
            Hide the picture.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.CheckBoxEnum">
      <summary>
            Specifies how boolean values are translated into check boxes.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.CheckBox" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class. 
            This property is useful when you wish to display boolean values graphically, 
            rather than using text.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.CheckBoxEnum.NoCheckBox">
      <summary>
            No checkbox (display as text).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.CheckBoxEnum.CheckBox">
      <summary>
            Checkbox.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.CheckBoxEnum.CrossBox">
      <summary>
            Crossbox.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.CheckBoxEnum.RadioButton">
      <summary>
            Radio button.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.BorderStyleEnum">
      <summary>
            Specifies the Field’s border style.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.BorderStyle" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.BorderStyleEnum.Transparent">
      <summary>
            No border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BorderStyleEnum.Solid">
      <summary>
            Solid border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BorderStyleEnum.Dash">
      <summary>
            Dashed border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BorderStyleEnum.Dot">
      <summary>
            Dotted border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BorderStyleEnum.DashDot">
      <summary>
            Dash-dot border.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BorderStyleEnum.DashDotDot">
      <summary>
            Dash-dot-dot border.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.LineSlantEnum">
      <summary>
            Determines whether/how a line should be drawn across the field 
            (as opposed to a box around the field).
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.LineSlant" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.LineSlantEnum.NoLine">
      <summary>
            Regular field (not a line).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.LineSlantEnum.NoSlant">
      <summary>
            Render field as a vertical line (if Height &gt; Width) 
            or as a horizontal line (if Width &gt; Height).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.LineSlantEnum.Down">
      <summary>
            Render field as a line between the left-top 
            and right-bottom corners of the field box.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.LineSlantEnum.Up">
      <summary>
            Render field as a line between the left-bottom 
            and right-top corners of the field box.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.RunningSumEnum">
      <summary>
            Determines whether to calculate a running sum.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.RunningSum" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.RunningSumEnum.NoRunningSum">
      <summary>
            Do not treat field as a running sum.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.RunningSumEnum.SumOverGroup">
      <summary>
            Calculate running sum over each group.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.RunningSumEnum.SumOverAll">
      <summary>
            Calculate running sum over the whole report.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.AnchorEnum">
      <summary>
            Determines how the field is positioned with respect to its containing section 
            when the section grows or shrinks as a result of the section's 
            <see cref="P:C1.Win.C1Report.Section.CanGrow" /> and <see cref="P:C1.Win.C1Report.Section.CanShrink" /> properties.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.Anchor" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.AnchorEnum.Top">
      <summary>
            The field does not move. The space between the top of the field 
            and the top of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.AnchorEnum.Bottom">
      <summary>
            The field moves vertically. The space between the bottom of the field 
            and the bottom of the section remains the same.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.AnchorEnum.TopAndBottom">
      <summary>
            The field grows or shrinks. The space between field and the section 
            remains the same (above and below).
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.TextDirectionEnum">
      <summary>
            Specifies the direction of the text in the field.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.TextDirection" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.TextDirectionEnum.Normal">
      <summary>
            Text direction is normal.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.TextDirectionEnum.Up">
      <summary>
            Text direction is up.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.TextDirectionEnum.Down">
      <summary>
            Text direction is down.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.BarCodeEnum">
      <summary>
            Determines what type of barcode will be used in the field.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Field.BarCode" /> property in the <see cref="T:C1.Win.C1Report.Field" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.None">
      <summary>
            No barcode.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.Code39">
      <summary>
            Alpha-numeric, (Code 3 of 9).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.Code93">
      <summary>
            Alpha-numeric.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.Code128">
      <summary>
            Alpha-numeric, denser than Code39 and required at least 6 characters.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.CodeI2of5">
      <summary>
            Numeric only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.Codabar">
      <summary>
            Numeric only, slightly denser than Code39.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.PostNet">
      <summary>
            Numeric only, US Postal Service.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.Ean13">
      <summary>
            EAN-13 barcode. EAN-13 encodes 12-digit article codes 
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.Ean8">
      <summary>
            EAN-8 barcode. EAN-8 encodes 7-digit article codes 
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BarCodeEnum.UpcA">
      <summary>
            UPC-A barcode. UPC-A encodes 11-digit article codes
            (plus one check digit created by the control).
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.BackStyleEnum">
      <summary>
            Determines whether the field will be rendered with an opaque or transparent background.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BackStyleEnum.Transparent">
      <summary>
            Transparent background.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.BackStyleEnum.Opaque">
      <summary>
            Opaque background.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Field">
      <summary>
            Displays individual data items in a report. 
            </summary>
      <remarks>
            Every element visible in a report is represented by a <b>Field</b> object. 
            Fields can display text, images, expressions, lines, rectangles, or subreports.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Field.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Field" /> class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Field.SetZOrder(System.Boolean)">
      <summary>
            Brings a field to the front or sends it to the back of the <b>ZOrder</b>.
            </summary>
      <param name="front">Determines whether the field is brought to the front or sent to the back
            of the <b>ZOrder</b>.</param>
    </member>
    <member name="M:C1.Win.C1Report.Field.ToString">
      <summary>
            Returns a description of the field (name, location, size).
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Report.Field.Clone">
      <summary>
            Creates a new object that is a copy of the current <see cref="T:C1.Win.C1Report.Field" /> object.
            </summary>
      <returns>Copy of the current <see cref="T:C1.Win.C1Report.Field" /> object.</returns>
    </member>
    <member name="P:C1.Win.C1Report.Field.Name">
      <summary>
            Gets or sets the field name.
            </summary>
      <remarks>
        <para>The field name can be used as an index into the control's <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.</para>
        <para>Field names are also used to identify fields in <b>VBScript</b> expressions, as shown in the example
            below.</para>
        <para>Duplicate and empty field names are allowed, but should be avoided if you plan to use the field names 
            in scripts or as indexers.</para>
      </remarks>
      <example>
            The code below assigns a script to the report's <see cref="F:C1.Win.C1Report.SectionTypeEnum.Detail" /> section. The script 
            changes a field's <see cref="P:C1.Win.C1Report.Field.ForeColor" /> property depending on a value.
            <code>
            _c1r.Sections.Fields["sampleField"].ForeColor = Color.Black;
            _c1r.Sections.Detail.OnFormat = 
                "sampleField.ForeColor = iif(someValue &lt; 5, vbRed, vbBlack)";
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Field.Visible">
      <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Field" /> will be rendered in the report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Tag">
      <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Index">
      <summary>
            Returns the position of the field in the parent report's <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Section">
      <summary>
            Gets or sets the section to which the field belongs.
            </summary>
      <remarks>
            To move a field from one section to another, set its <see cref="P:C1.Win.C1Report.Field.Section" /> property to a new value.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.ParentReport">
      <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report" /> that contains this field.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.ParentSection">
      <summary>
            Gets the <see cref="P:C1.Win.C1Report.Field.Section" /> that contains this field.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Text">
      <summary>
            Gets or sets the field's text.
            </summary>
      <remarks>
        <para>The <see cref="P:C1.Win.C1Report.Field.Text" /> property contains the text that will be rendered on the report.</para>
        <para>This value may be rendered literally (without any translation) or it may be evaluated as a 
            <b>VBScript</b> expression, depending on the setting of the <see cref="P:C1.Win.C1Report.Field.Calculated" /> property.</para>
      </remarks>
      <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Field.Calculated">
      <summary>
            Specifies whether the <see cref="P:C1.Win.C1Report.Field.Text" /> property should be interpreted as a literal value
            or as a calculated expression.
            </summary>
      <remarks>
        <para>If this property is set to false, the value of the <see cref="P:C1.Win.C1Report.Field.Text" /> property is rendered 
            on the report without any further processing.</para>
        <para>If it is set to true, the value of the <see cref="P:C1.Win.C1Report.Field.Text" /> property is evaluated as a 
            <b>VBScript</b> expression and the result of the expression is rendered on the report.</para>
      </remarks>
      <example>
            The code below creates two fields. One displays the label "Sales Tax", the other displays the
            tax value by multiplying a database field ("Sales") by a constant.
            <code>
            // display literal Text
            _c1r.Field[0].Text = "Sales Tax";
            _c1r.Field[0].Calculated = false; 
            
            // display a calculated value
            _c1r.Field[1].Text = "Sales * 0.085";
            _c1r.Field[1].Calculated = true; 
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Field.Value">
      <summary>
            Gets or sets the field's calculated value.
            </summary>
      <remarks>
        <para>When a field's <see cref="P:C1.Win.C1Report.Field.Calculated" /> property is set to true, the control evaluates 
            the expression stored in the <see cref="P:C1.Win.C1Report.Field.Text" /> property and stores the result in the 
            <see cref="P:C1.Win.C1Report.Field.Value" /> property, which gets rendered into the report.</para>
        <para>This is the field's default property, so when you use a field name in a <b>VBScript</b>
            expression, you are actually referring to the field's <see cref="P:C1.Win.C1Report.Field.Value" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.HideDuplicates">
      <summary>
            Specifies whether duplicate values in consecutive records should be suppressed.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.Win.C1Report.Field.HideDuplicates" /> property to hide a field on a report 
            when its value is the same as in the preceding record.</para>
        <para>For example, on a report listing suppliers and their products, each supplier's name 
            can appear once for each group of products, rather than once for each product.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.RunningSum">
      <summary>
            Specifies whether to show a running sum for the field.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.Win.C1Report.Field.RunningSum" /> property to calculate record-by-record or 
            group-by-group totals in a report.</para>
        <para>The <see cref="P:C1.Win.C1Report.Field.RunningSum" /> property specifies whether a calculated field on a report 
            displays a running total and lets you set the range over which values are accumulated.</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Report.RunningSumEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Field.Left">
      <summary>
            Gets or sets the x-coordinate of the field's left edge in twips.
            </summary>
      <remarks>
        <para>A field's location is the distance from its upper left corner to the upper left corner
            of its containing <see cref="P:C1.Win.C1Report.Field.Section" />.</para>
        <para>Setting the <see cref="P:C1.Win.C1Report.Field.Left" /> or <see cref="P:C1.Win.C1Report.Field.Top" /> property to zero places the field at 
            the very left or top of its containing section.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Top">
      <summary>
            Gets or sets the y-coordinate of the field's top edge in twips.
            </summary>
      <remarks>
        <para>A field's location is the distance from its upper left corner to the upper left corner of its containing 
            <see cref="P:C1.Win.C1Report.Field.Section" />.</para>
        <para>If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow" /> or <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top" /> and <see cref="P:C1.Win.C1Report.Field.Height" /> properties is not affected.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Width">
      <summary>
            Gets or sets the width of the field in twips.
            </summary>
      <remarks>
        <para>Every <see cref="T:C1.Win.C1Report.Field" /> object has a rectangle, or "field box", where the field contents are rendered.</para>
        <para>The field box is defined by the <see cref="P:C1.Win.C1Report.Field.Left" />, <see cref="P:C1.Win.C1Report.Field.Top" />, <see cref="P:C1.Win.C1Report.Field.Width" />, and <see cref="P:C1.Win.C1Report.Field.Height" /> properties.</para>
        <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Height">
      <summary>
            Gets or sets the height of the field in twips.
            </summary>
      <remarks>
        <para>Every <see cref="T:C1.Win.C1Report.Field" /> object has a rectangle, or "field box", where the field contents are rendered.</para>
        <para>The field box is defined by the <see cref="P:C1.Win.C1Report.Field.Left" />, <see cref="P:C1.Win.C1Report.Field.Top" />, <see cref="P:C1.Win.C1Report.Field.Width" />, and <see cref="P:C1.Win.C1Report.Field.Height" /> properties.</para>
        <para>These properties are expressed in twips, and the position is relative to the field's containing section.</para>
        <para>The field's <see cref="P:C1.Win.C1Report.Field.Height" /> property should be set to a value larger than or equal to the height of the 
            field's <see cref="P:C1.Win.C1Report.Field.Font" />, or no text will appear in the field.</para>
        <para>If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow" /> or <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top" /> and <see cref="P:C1.Win.C1Report.Field.Height" /> properties is not affected.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.ForcePageBreak">
      <summary>
            Specifies whether to insert page breaks before or after the field.
            </summary>
      <seealso cref="T:C1.Win.C1Report.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Field.CanGrow">
      <summary>
            Specifies whether the field height should be automatically increased to fit the field's contents.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.Win.C1Report.Field.CanGrow" /> and <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties to control 
            the appearance of report fields and sections. When you set both properties to true, the field 
            or section automatically adjusts so any amount of data can be printed. When a field grows or 
            shrinks, the fields below it move down or up the page.</para>
        <para>If you set a field's <see cref="P:C1.Win.C1Report.Field.CanGrow" /> property to true, the control automatically 
            sets the <see cref="P:C1.Win.C1Report.Field.CanGrow" /> property of the containing section to true. (However, if you 
            set a control's <see cref="P:C1.Win.C1Report.Field.CanShrink" /> property to true, the control doesn't set the section's 
            <see cref="P:C1.Win.C1Report.Field.CanShrink" /> property to true.)</para>
        <para>When you use the <see cref="P:C1.Win.C1Report.Field.CanGrow" /> and <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties, remember that:</para>
        <para>1. The property settings don't affect the horizontal spacing between fields; they affect 
            only the vertical space the fields occupy.</para>
        <para>2. The height of a large field can prevent fields beside it from shrinking. For example, 
            if several short controls are on the left side of a report's detail section and one tall control, 
            such as an unbound object frame, is on the right side, the controls on the left won't shrink,
            even if they contain no data.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.CanShrink">
      <summary>
            Specifies whether the field height should be automatically reduced to fit the field's contents.
            </summary>
      <seealso cref="P:C1.Win.C1Report.Field.CanGrow" />
    </member>
    <member name="P:C1.Win.C1Report.Field.KeepTogether">
      <summary>
            Specifies whether the field should be kept together on a page.
            </summary>
      <remarks>
        <para>If this property is set to true, the control will insert page breaks in order to keep 
            the field contents together on a page.</para>
        <para>If it is set to false, and the containing <see cref="P:C1.Win.C1Report.Field.Section" /> also has its 
            <see cref="P:C1.Win.C1Report.Section.KeepTogether" /> property set to false, then the field may be rendered across
            two or more pages.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Anchor">
      <summary>
            Gets or sets the field's vertical position relative to its containing <see cref="P:C1.Win.C1Report.Field.Section" />.
            </summary>
      <remarks>
        <para>Normally, fields do not move when sections grow or shrink. In some cases, however, you may want
            fields to grow with the section or to stay in the same position relative to the bottom of the
            section.</para>
        <para>This is especially common for fields used to create vertical lines that should extend
            the entire height of the section.</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Report.AnchorEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Field.ZOrder">
      <summary>
            Gets or sets the <b>ZOrder</b> for the field.
            </summary>
      <remarks>
        <para>The <b>ZOrder</b> of a field determines whether it is rendered in front of or behind 
            other fields that overlap with it.</para>
        <para>High <b>ZOrder</b> values bring the field to the front, low values send it to the back.</para>
        <para>Because <b>ZOrder</b> values are relative, it is usually easier to call the <see cref="M:C1.Win.C1Report.Field.SetZOrder(System.Boolean)" /> 
            method, which ensures the field is rendered in front of or behind all other overlapping fields.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.RenderTop">
      <summary>
            Gets or sets the y-coordinate of the field's top edge in twips after the <see cref="P:C1.Win.C1Report.Field.CanGrow" /> and 
            <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties have been applied to the containing <see cref="P:C1.Win.C1Report.Field.Section" />.
            </summary>
      <remarks>
            If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow" /> or <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top" /> and <see cref="P:C1.Win.C1Report.Field.Height" /> properties is not affected.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.RenderHeight">
      <summary>
            Gets the height of the field in twips after the <see cref="P:C1.Win.C1Report.Field.CanGrow" /> and <see cref="P:C1.Win.C1Report.Field.CanShrink" />
            properties have been applied to the field.
            </summary>
      <remarks>
            If the field's <see cref="P:C1.Win.C1Report.Field.CanGrow" /> or <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties are set to true, the control will 
            automatically adjust the <see cref="P:C1.Win.C1Report.Field.RenderHeight" /> property to fit the field's contents and the <see cref="P:C1.Win.C1Report.Field.RenderTop" /> 
            property of fields below the current field to preserve the vertical distance between fields. The value of the 
            <see cref="P:C1.Win.C1Report.Field.Top" /> and <see cref="P:C1.Win.C1Report.Field.Height" /> properties is not affected.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Bounds">
      <summary>
            Gets or sets the field's size and location within the section, in twips.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Size">
      <summary>
            Gets or sets the field's size, in twips.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Location">
      <summary>
            Gets or sets the field's location within the section, in twips.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.Font">
      <summary>
            Gets or sets the field's font.
            </summary>
      <remarks>If you set a field's font <see cref="P:C1.Win.C1Report.Util.FontHolder.Size" /> property to a value that 
            is too large to fit the field box (defined by the <see cref="P:C1.Win.C1Report.Field.Height" /> property), 
            no text will appear in the field.
            </remarks>
      <seealso cref="T:C1.Win.C1Report.Util.FontHolder" />
    </member>
    <member name="P:C1.Win.C1Report.Field.BackColor">
      <summary>
            Gets or sets the field's background color. 
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.ForeColor">
      <summary>
            Gets or sets the field's foreground color.
            </summary>
      <remarks>
            Use the <b>ForeColor</b> property to specify the color for text in a field. You can use this property to make 
            fields easy to read or to convey a special meaning.
            </remarks>
      <example>
            The code below uses script to change the color of the text in the <i>UnitsInStock</i> field when its value 
            falls below the reorder level.
            <code>
            // build script
            string script = "UnitsInStock.ForeColor = " +
            	"IIF(UnitsInStock &lt; ReorderLevel, vbRed, vbBlack)";
            	
            // assign script to detail section
            _c1r.Sections.Detail.OnPrint = script;
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Field.Format">
      <summary>
            Gets or sets a string used to format the field value.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.Win.C1Report.Field.Format" /> property to customize the way numbers, dates, times, 
            and text are displayed and printed.</para>
        <para>For example, if you've created a <b>Price</b> field, you can set its <see cref="P:C1.Win.C1Report.Field.Format" /> 
            property to "Currency". If the field value is set to "4321.678", it would be rendered as $4,321.68.</para>
        <para>You can use the <see cref="P:C1.Win.C1Report.Field.Format" /> property to format numbers (including currency and percentage 
            values), dates, boolean values, and strings.</para>
        <para>The syntax for the format string is the same used with the .NET <see cref="M:System.String.Format(System.String,System.Object)" /> method.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Align">
      <summary>
            Gets or sets how text is aligned within the field.
            </summary>
      <seealso cref="T:C1.Win.C1Report.FieldAlignEnum" />
      <remarks>
        <para>This property determines how text is aligned within the field.</para>
        <para>To control picture alignment, use the <see cref="P:C1.Win.C1Report.Field.PictureAlign" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.WordWrap">
      <summary>
            Specifies whether the field's contents should be allowed to wrap within the field rectangle.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Field.TextDirection">
      <summary>
            Gets or sets the direction of the text within the field.
            </summary>
      <seealso cref="T:C1.Win.C1Report.TextDirectionEnum" />
      <remarks>
            Not all output formats support vertical text. The preview, print, PDF, TIFF, and XLS formats do support 
            vertical text. The HTML, RTF, and plain text formats do not.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.LineSpacing">
      <summary>
            Gets or sets the line spacing between text lines in the field, in twips.
            </summary>
      <remarks>
            Setting this property to zero causes the control to use the default line spacing, 
            which corresponds to the height of the field's font.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.MarginLeft">
      <summary>
            Gets or sets the spacing between the left edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.MarginTop">
      <summary>
            Gets or sets the spacing between the top edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.MarginRight">
      <summary>
            Gets or sets the spacing between the right edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.MarginBottom">
      <summary>
            Gets or sets the spacing between the bottom edge of the field and its content, in twips.
            </summary>
      <remarks>
            This property is useful for rendering fields with borders or solid backgrounds, to add some space 
            between the borders and the field content.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.BorderStyle">
      <summary>
            Gets or sets the field's border style.
            </summary>
      <remarks>
        <para>To draw a border around a field, set the following properties:</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.BorderColor" /> to define the border color.</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.BorderStyle" /> to define the border style (e.g., solid, dashed, etc.).</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.LineWidth" /> to define the border width (in twips).</para>
        <para>When you create fields with text and a border, text will be positioned very close to the border. You can control 
            the distance between the text and the border using the <see cref="P:C1.Win.C1Report.Field.MarginLeft" />, <see cref="P:C1.Win.C1Report.Field.MarginRight" />,
            <see cref="P:C1.Win.C1Report.Field.MarginTop" />, and <see cref="P:C1.Win.C1Report.Field.MarginBottom" /> properties.</para>
        <para>To draw lines, see the <see cref="P:C1.Win.C1Report.Field.LineSlant" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.LineWidth">
      <summary>
            Gets or sets the width of the field's border or line.
            </summary>
      <remarks>
        <para>To draw a border around a field, set the following properties:</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.BorderColor" /> to define the border color.</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.BorderStyle" /> to define the border style (e.g., solid, dashed, etc.).</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.LineWidth" /> to define the border width (in twips).</para>
        <para>To draw lines, see the <see cref="P:C1.Win.C1Report.Field.LineSlant" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.BorderColor">
      <summary>
            Gets or sets the field's border color.
            </summary>
      <seealso cref="P:C1.Win.C1Report.Field.BorderStyle" />
      <remarks>
        <para>To draw a border around a field, set the following properties:</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.BorderColor" /> to define the border color.</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.BorderStyle" /> to define the border style (e.g., solid, dashed, etc.).</para>
        <para>
          <see cref="P:C1.Win.C1Report.Field.LineWidth" /> to define the border width (in twips).</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.LineSlant">
      <summary>
            Specifies whether a line should be drawn across the field (as opposed to a box around the field).
            </summary>
      <seealso cref="T:C1.Win.C1Report.LineSlantEnum" />
      <remarks>
            The color, style, and thickness of the line are determined by the <see cref="P:C1.Win.C1Report.Field.BorderColor" />, <see cref="P:C1.Win.C1Report.Field.BorderStyle" />, 
            and <see cref="P:C1.Win.C1Report.Field.LineWidth" /> properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.Picture">
      <summary>
            Gets or sets a picture to display on the field.
            </summary>
      <remarks>
        <para>You may set this property to three types of object:</para>
        <para>1) Regular .NET <see cref="T:System.Drawing.Image" /> objects.</para>
        <para>2) Strings containing image file names or Urls.</para>
        <para>3) Strings containing names of image fields in the report data source.</para>
        <para>Options 1 and 2 are used to create unbound images, such as logos. These images do not 
            depend on the report data.</para>
        <para>Option 3 is used to create bound images, such as product or employee pictures. These 
            are images stored with the report data.</para>
      </remarks>
      <seealso cref="P:C1.Win.C1Report.Field.PictureAlign" />
      <seealso cref="P:C1.Win.C1Report.Field.PictureScale" />
    </member>
    <member name="P:C1.Win.C1Report.Field.PictureAlign">
      <summary>
            Gets or sets how field pictures should be the aligned.
            </summary>
      <seealso cref="P:C1.Win.C1Report.Field.Picture" />
      <seealso cref="P:C1.Win.C1Report.Field.PictureScale" />
      <seealso cref="T:C1.Win.C1Report.PictureAlignEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Field.PictureScale">
      <summary>
            Gets or sets how images should be the scaled to fit within the field area.
            </summary>
      <remarks>
        <para>Depending on the setting of this property, images may be clipped, stretched, scaled (which preserves the 
            image's aspect ratio), tiled, or hidden.</para>
        <para>
          <b>PictureScale</b> works with the <see cref="P:C1.Win.C1Report.Field.PictureAlign" /> property so you can control image scaling and 
            alignment independently.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.CheckBox">
      <summary>
            Specifies whether the field should be displayed as a checkbox.
            </summary>
      <remarks>
            This property allows you to display boolean values graphically, rather than as plain text.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.RTF">
      <summary>
            Specifies whether the field should render string enclosed in curly brackets as RTF.
            </summary>
      <remarks>If you set this property to true, any fields containing text 
            enclosed in curly brackets will be rendered as RTF. 
            This allows you to add complex formatting within a field.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Field.BarCode">
      <summary>
            Allows fields to be rendered in barcode format.
            </summary>
      <seealso cref="T:C1.Win.C1Report.BarCodeEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Field.LinkTarget">
      <summary>
            Gets or sets an expression that evaluates to a URL to be visited when the field is clicked.
            </summary>
      <remarks>
        <para>If not empty, this should be an expression that evaluates to a URL. After the report is generated, 
            clicking on the field will cause the report viewer to navigate to the URL. The report viewer can be a web browser 
            (for HTML reports), Adobe Acrobat (for PDF reports), or other viewer applications.</para>
        <para>Not all report viewers support hyperlinks. The <b>PrintPreview</b> control that ships with .NET, for example, 
            does not.</para>
        <para>The field will be displayed as usual, based on the contents of its <see cref="P:C1.Win.C1Report.Field.Text" /> and <see cref="P:C1.Win.C1Report.Field.Picture" /> 
            properties.</para>
        <para>The <see cref="P:C1.Win.C1Report.Field.LinkTarget" /> expression is always evaluated, regardless of the setting of the <see cref="P:C1.Win.C1Report.Field.Calculated" /> 
            property (which only applies to the display text). This allows you to bind the <see cref="P:C1.Win.C1Report.Field.LinkTarget" /> to a field in the 
            data source, as show in the example below.</para>
      </remarks>
      <example>
            The code below creates two hyperlink fields, one with a static value and one based on a database value.
            <code>
            // set up a static link
            Field f = c1r.Fields["companyInfoLink"];
            f.Calculated = false;
            f.Text = "click here for more info on our company";
            f.LinkTarget = "http://myrealty.com";
            
            // set up a databound link
            Field f = c1r.Fields["propertyInfoLink"];
            f.Calculated = false;
            f.Text = "click here for more info on this property";
            f.LinkTarget = "\"http://myrealty.com/moreinfo?id=\" &amp; propertyID";
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Field.Subreport">
      <summary>
            Gets or sets a reference to another report to be rendered within the field (a <i>subreport</i>).
            </summary>
      <remarks>
        <para>A subreport is a report that is inserted in another report. Subreports are useful when you want to combine 
            several reports into one. For example, you may have a main report that integrates several subreports into a single 
            main report. Or you can use the main report to show detailed information and use subreports to show summary data 
            at the beginning of each group.</para>
        <para>For some real-world examples, check the "Sales By Category" and "Sales By Year" reports in the NWIND.XML
            sample that ships with the control.</para>
        <para>To define a field as a subreport, you should start by loading the subreport, then assign the subreport 
            control to the field's <see cref="P:C1.Win.C1Report.Field.Subreport" /> property.</para>
        <para>Next, link the subreport to the main report using the subreport field's <see cref="P:C1.Win.C1Report.Field.Text" /> property (this is 
            analogous to setting the <b>LinkChildFields/LinkMasterFields</b> properties in a Microsoft  Access subreport). The 
            <b>Text</b> property in a subreport field is used as a filter. It specifies which records in the source recordset 
            should be used to render the subreport based on the current record for the main report.</para>
        <para>When the main report is being rendered and reaches the subreport field, the <b>Text</b> expression is evaluated 
            and the result is uses as a filter condition for the subreport.</para>
        <para>Building the link expression is not difficult, but it is a little tricky because it requires you to create a 
            string that contains quotes, and these internal quotes must be doubled (written as "").</para>
        <para>If you are creating reports using the Report Designer, you don't have to worry about building the link expressions 
            in code. Instead, right-click the subreport field and select the <b>Link Subreport...</b> menu. This will show a dialog 
            where you can select the master and detail fields. When you click OK, the Report Designer will build the link expression 
            and assign it to the <b>Text</b> property of the subreport field automatically.</para>
        <para>Subreport fields usually have the <see cref="P:C1.Win.C1Report.Field.CanGrow" /> property set to true, so the subreport field can expand to 
            include all its records.</para>
        <para>Subreports may contain other subreports. There's no set limit for the depth of report nesting you can have. 
            However, there must be no circular references to reports. In other words, a report cannot contain a reference to itself 
            as a subreport.</para>
      </remarks>
      <example>
        <code>
            // load subreport and assign it to a field in the main report
            string sSub = "Sales By Category Subreport";
            c1Sub.Load("NWIND.XML", sSub);
            c1rMain.Fields[sSub].Subreport = c1Sub;
            
            // set up connection between main report and subreport
            c1rMain.Fields[sSub].Calculated = true;
            c1rMain.Fields[sSub].Text = "\"CategoryName = '\" &amp; [CategoryName] &amp; \"'\"";
            </code>
      </example>
    </member>
    <member name="P:C1.Win.C1Report.Field.SubreportHasData">
      <summary>
            Returns whether a subreport has data and suppresses rendering if it doesn't.
            </summary>
      <remarks>
            This property allows you to check whether a subreport has data and prevent it from rendering if it doesn't. 
            </remarks>
      <example>
            The code below uses script to hide sections with empty subreports:
            <code>
            _c1r.Sections.Detail.OnPrint = "Detail.Visible = fSubreport.SubreportHasData"
            </code>
            The code below uses script to hide a field containing an empty subreport and show another field instead:
            <code>
            _c1r.Sections.Detail.OnPrint = 
                "hasData = fSubreport.SubreportHasData\r\n" +
                "fSubreport.Visible = hasData" +
                "fNoData.Visible = Not hasData\r\n" +
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Field.LinkValue">
      <summary>
            Returns the value of the LinkTarget expression.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.FieldCollection">
      <summary>
            FieldCollection class represents a collection of the <see cref="T:C1.Win.C1Report.Field" /> objects. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.CopyTo(C1.Win.C1Report.Field[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied from collection. 
            The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Add(System.String,System.String,System.Double,System.Double,System.Double,System.Double)">
      <summary>
            Adds a field to a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
      <param name="text">Contains the value for the new field's <see cref="P:C1.Win.C1Report.Field.Text" /> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.Win.C1Report.Field.Calculated" /> property. By default, <see cref="P:C1.Win.C1Report.Field.Calculated" /> is set to false and the text 
            is rendered as-is.</param>
      <param name="left">Left coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="top">Top coordinate of the new field, in twips, with respect to its containing section.</param>
      <param name="width">Width of the new field, in twips.</param>
      <param name="height">Height of the new field, in twips.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
        <para>If you add a field to a section's <see cref="P:C1.Win.C1Report.Section.Fields" /> collection, the new field is automatically 
            assigned to that section.</para>
        <para>If you add a field to the control's <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="P:C1.Win.C1Report.Field.Section" /> property or it will not be 
            rendered in the report.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Add(System.String,System.String,System.Drawing.Rectangle)">
      <summary>
            Adds a field to a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="name">Contains the name of the new field. You should use a consistent naming scheme for the fields 
            and avoid using duplicate names for report fields and database fields. Using repeated names is legal but will 
            cause VBScript expressions that use repeated field names to yield unexpected results.</param>
      <param name="text">Contains the value for the new field's <see cref="P:C1.Win.C1Report.Field.Text" /> property. This value 
            may be treated as a literal or as a VBScript expression, depending on the setting of the field's 
            <see cref="P:C1.Win.C1Report.Field.Calculated" /> property. By default, <see cref="P:C1.Win.C1Report.Field.Calculated" /> is set to false and the text 
            is rendered as-is.</param>
      <param name="rc">Defines the position of the field, in twips, with respect to its containing section.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
        <para>If you add a field to a section's <see cref="P:C1.Win.C1Report.Section.Fields" /> collection, the new field is automatically 
            assigned to that section.</para>
        <para>If you add a field to the control's <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection, the new field is not assigned 
            to any sections. In this case, you must set the field's <see cref="P:C1.Win.C1Report.Field.Section" /> property or it will not be 
            rendered in the report.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Add(C1.Win.C1Report.Field)">
      <summary>
            Adds a field or a clone of a field to a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="field">A <see cref="T:C1.Win.C1Report.Field" /> object to add to the collection.</param>
      <returns>A reference to the newly added field.</returns>
      <remarks>
            In the field does not belong to any reports, it is added to the collection. If the field already
            belongs to a report, a clone is created and added to the collection.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.RemoveAt(System.Int32)">
      <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="index">Specifies the field to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Remove(System.Int32)">
      <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="index">Specifies the field to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Remove(System.String)">
      <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="name">The name of the field to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Remove(C1.Win.C1Report.Field)">
      <summary>
            Removes a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <param name="f">The field to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Contains(System.String)">
      <summary>
            Determines whether the collection contains a specific field.
            </summary>
      <param name="name">The name of the field.</param>
      <returns>True if the collection contains a field with the specified name;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.FieldCollection.Contains(C1.Win.C1Report.Field)">
      <summary>
            Determines whether the collection contains a specific field.
            </summary>
      <param name="f">Reference to the <see cref="T:C1.Win.C1Report.Field" /> object.</param>
      <returns>True if the collection contains specified field;
             otherwise, false.</returns>
    </member>
    <member name="P:C1.Win.C1Report.FieldCollection.Item(System.Int32)">
      <summary>
            Returns a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <remarks>The index parameter may be an integer between zero and <see cref="P:C1.Win.C1Report.FieldCollection.Count" />-1.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.FieldCollection.Item(System.String)">
      <summary>
            Returns a field from a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
      <remarks>The name parameter may be a string containing a field name.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.FieldCollection.Count">
      <summary>
            Returns the number of fields in a <see cref="P:C1.Win.C1Report.C1Report.Fields" /> collection.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.SortEnum">
      <summary>
            Specifies how groups should be sorted.
            </summary>
      <remarks>Use the members of this enumeration to set the value of 
            the <see cref="P:C1.Win.C1Report.Group.Sort" /> property in the <see cref="T:C1.Win.C1Report.Group" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.SortEnum.NoSort">
      <summary>
            Do not sort records for this group.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SortEnum.Ascending">
      <summary>
            Sort records in ascending order.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SortEnum.Descending">
      <summary>
            Sort records in descending order.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.KeepTogetherEnum">
      <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Group.KeepTogether" /> and 
            <see cref="P:C1.Win.C1Report.Section.KeepTogether" /> property in the <see cref="T:C1.Win.C1Report.Group" /> and <see cref="T:C1.Win.C1Report.Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.KeepTogetherEnum.KeepNothing">
      <summary>
            Do not try to keep the group together.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.KeepTogetherEnum.KeepWholeGroup">
      <summary>
            Keep the group header, detail, and footer together on a page.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.KeepTogetherEnum.KeepFirstDetail">
      <summary>
            Keep the group header and first detail section together on a page.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Group">
      <summary>
            Object used to sort and group report data. 
            </summary>
      <remarks>
            Each <b>Group</b> has a Header section and a Footer section that can be used to display
            aggregate information for the group.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.Group.Move(System.Int32,System.Boolean)">
      <summary>
            Moves a group to a new position in the <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection, optionally 
            adjusting its <see cref="P:C1.Win.C1Report.C1Report.Sections" /> and <see cref="P:C1.Win.C1Report.C1Report.Fields" />.
            </summary>
      <param name="newIndex">Contains the new position for the group (index into the <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection).</param>
      <param name="adjustSections">Determines whether only the group should be moved or whether its header and footer sections, 
            along with all the fields in those sections, should also be moved.</param>
      <remarks>
            This method is useful in designer applications, when you want to allow users to change the grouping order.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Group.Name">
      <summary>
            Gets or sets the group name.
            </summary>
      <remarks>The group name can be used as an index into the control's <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Group.GroupBy">
      <summary>
            Gets or sets the expression used to break records into groups.
            </summary>
      <remarks>This property contains a <b>VBScript</b> expression that is evaluated for every record 
            in the source recordset. A new group is started whenever the value of this expression changes. 
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Group.Sort">
      <summary>
            Gets or sets how the group is sorted.
            </summary>
      <remarks>
        <para>The specified sorting is applied to the content of the <see cref="P:C1.Win.C1Report.Group.GroupBy" /> property. For example, 
            if <see cref="P:C1.Win.C1Report.Group.GroupBy" /> contains the expression "FirstName" and <see cref="P:C1.Win.C1Report.Group.Sort" /> is set to "Ascending", 
            then the group will be sorted in ascending order based on the content of the "FirstName" column in the data source.</para>
        <para>Note that the sorting is performed by the data source itself, not by C1Report. Because of this, sorting 
            is always based on column names rather than calculated expressions. If the <see cref="P:C1.Win.C1Report.Group.GroupBy" /> property contains a
            calculated expression, the component will extract the first column name from the expression and will sort based on that 
            value. For example, if <see cref="P:C1.Win.C1Report.Group.GroupBy" /> is set to "Left(FirstName, 3)", the sorting will be based on the 
            "FirstName" column, not on the first three characters of the first names.</para>
        <para>This can present problems in a few cases, especially if you want to sort based on date parts (year, month, quarter). 
            In these cases, the recommended procedure is to add a calculated column to the data source (by changing the SQL statement 
            used to retrieve the data), then set the <see cref="P:C1.Win.C1Report.Group.GroupBy" /> property to the name of the calculated column.</para>
      </remarks>
      <example>
            The code below uses a SQL statement to add a "HireQuarter" column to the data source, then sorts a group based on 
            this new column. The report will show employees sorted by the quarter when they were hired.
            <code>
            string sql = 
                "SELECT *, DATEPART('q', HireDate) AS HireQuarter " +
                "FROM Employees";
            c1r.DataSource.RecordSource = sql;
            c1r.Groups[0].GroupBy = "HireQuarter";
            c1r.Groups[0].Sort = SortEnum.Ascending;
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Group.KeepTogether">
      <summary>
            Specifies whether the group should be kept together on a page.
            </summary>
      <seealso cref="T:C1.Win.C1Report.KeepTogetherEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Group.SectionHeader">
      <summary>
            Returns the <see cref="T:C1.Win.C1Report.Section" /> used as this group's header.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Group.SectionFooter">
      <summary>
            Returns the <see cref="T:C1.Win.C1Report.Section" /> used as this group's footer.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Group.Tag">
      <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Group.ParentReport">
      <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report" /> object that contains this <see cref="T:C1.Win.C1Report.Group" />.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.GroupCollection">
      <summary>
            GroupCollection class represents a collection of the <see cref="T:C1.Win.C1Report.Group" /> objects. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.CopyTo(C1.Win.C1Report.Group[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements copied 
            from the collection. The array must have zero-based indexing.</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.Add(System.String,System.String,C1.Win.C1Report.SortEnum)">
      <summary>
            Adds a new <see cref="T:C1.Win.C1Report.Group" /> to the collection, along with header and footer sections for the new group. 
            </summary>
      <param name="name">Contains the name of the new group.</param>
      <param name="groupBy">Contains the value of the <see cref="P:C1.Win.C1Report.Group.GroupBy" /> property for the new group.</param>
      <param name="sort">Contains the value of the <see cref="P:C1.Win.C1Report.Group.Sort" /> property for the new group.</param>
      <returns>A reference to the newly added group.</returns>
      <remarks>
            When a group is added to a report, the control automatically adds two new sections, the group header and group 
            footer sections for the new group. These new sections are invisible by default.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.Remove(System.Int32)">
      <summary>
            Removes a <see cref="T:C1.Win.C1Report.Group" /> from the <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection, 
            and its header/footer sections from the <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.
            </summary>
      <param name="index">Specifies the group to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.Remove(System.String)">
      <summary>
            Removes a <see cref="T:C1.Win.C1Report.Group" /> from the <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection, 
            and its header/footer sections from the <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.
            </summary>
      <param name="name">The name of the group to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.Remove(C1.Win.C1Report.Group)">
      <summary>
            Removes a <see cref="T:C1.Win.C1Report.Group" /> from the <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection, 
            and its header/footer sections from the <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.
            </summary>
      <param name="group">The group to be removed.</param>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.Contains(System.String)">
      <summary>
            Determines whether the collection contains a specific group.
            </summary>
      <param name="name">The name of the group.</param>
      <returns>True if the collection contains a group with the specified name;
             otherwise, false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.GroupCollection.Contains(C1.Win.C1Report.Group)">
      <summary>
            Determines whether the collection contains a specific group.
            </summary>
      <param name="g">Reference to the <see cref="T:C1.Win.C1Report.Group" /> object.</param>
      <returns>True if the collection contains specified field;
             otherwise, false.</returns>
    </member>
    <member name="P:C1.Win.C1Report.GroupCollection.Item(System.Int32)">
      <summary>
            Returns a group from a <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection.
            </summary>
      <remarks>The index parameter may be an integer between zero and <see cref="P:C1.Win.C1Report.GroupCollection.Count" />-1.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.GroupCollection.Item(System.String)">
      <summary>
            Returns a group from a <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection.
            </summary>
      <remarks>The name parameter may be a string containing a group name.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.GroupCollection.Count">
      <summary>
            Returns the number of groups in a <see cref="P:C1.Win.C1Report.C1Report.Groups" /> collection.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.OrientationEnum">
      <summary>
            Specifies the page orientation.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the 
            <see cref="P:C1.Win.C1Report.Layout.Orientation" /> property in the <see cref="T:C1.Win.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.OrientationEnum.Auto">
      <summary>
            Set the orientation automatically, based on the current <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> 
            and report width (<see cref="P:C1.Win.C1Report.Layout.Width" />).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.OrientationEnum.Portrait">
      <summary>
            Use Portrait orientation (tall).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.OrientationEnum.Landscape">
      <summary>
            Use Landscape orientation (wide).
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.ColumnLayoutEnum">
      <summary>
            Specifies the layout for the columns (down or across).
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Layout.ColumnLayout" /> property 
            in the <see cref="T:C1.Win.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.ColumnLayoutEnum.Down">
      <summary>
            Columns are laid out down the page, then across.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ColumnLayoutEnum.Across">
      <summary>
            Columns are laid out across the page, then down.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ColumnLayoutEnum.Labels">
      <summary>
            Causes the report designer to discount label spacing in the design surface, 
            hide header/footer sections, disable grouping button, 
            and disable automatic section resizing when fields are moved or dragged.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.HdrFtrEnum">
      <summary>
            Specifies where the Page Footer and Page Header sections are displayed.
            </summary>
      <remarks>Use the members of this enumeration to set the value 
            of the <see cref="P:C1.Win.C1Report.Layout.PageFooter" /> and <see cref="P:C1.Win.C1Report.Layout.PageHeader" /> properties 
            in the <see cref="T:C1.Win.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.HdrFtrEnum.AllPages">
      <summary>
            The page footer and header are printed on all pages of a report. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.HdrFtrEnum.NotWithReportHdr">
      <summary>
            The page header isn't printed on the same page as the report header. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.HdrFtrEnum.NotWithReportFtr">
      <summary>
            The page footer isn't printed on the same page as the report footer. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.HdrFtrEnum.NotWithReportHdrFtr">
      <summary>
            The page footer and header are not printed on a page that has either a report header or a report footer.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.PictureShowEnum">
      <summary>
            Specifies where the background picture is displayed.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Layout.PictureShow" /> property in the <see cref="T:C1.Win.C1Report.Layout" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.PictureShowEnum.NoPages">
      <summary>
            Do not show the background picture.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureShowEnum.AllPages">
      <summary>
            Show the background picture on all pages.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureShowEnum.FirstPage">
      <summary>
            Show the background picture on the first page only.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.PictureShowEnum.AllButFirstPage">
      <summary>
            Show the background picture on all pages but the first.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Layout">
      <summary>
            The Layout object controls how the report is rendered on pages.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Layout.ToString">
      <summary>
            Returns a description of layout to show it in designer. 
            </summary>
      <returns>
      </returns>
    </member>
    <member name="M:C1.Win.C1Report.Layout.UpdateFromPrintDoc">
      <summary>
            Copies information from <see cref="T:C1.Win.C1Report.PrintDoc" /> to <see cref="T:C1.Win.C1Report.Layout" /> object.
            </summary>
      <returns>True if <see cref="T:C1.Win.C1Report.Layout" /> object was changed.</returns>
      <remarks>This is useful if you want to make changes to the <see cref="T:System.Drawing.Printing.PageSettings" />
            object instead of the <see cref="T:C1.Win.C1Report.Layout" /> object.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.Width">
      <summary>
            Gets or sets the width of the report's detail section, in twips.
            </summary>
      <remarks>
        <para>This property determines the width of the detail section of the report.</para>
        <para>Multi-column reports have header and footer sections that span all columns so their actual width is 
            <see cref="P:C1.Win.C1Report.Layout.Width" /> * <see cref="P:C1.Win.C1Report.Layout.Columns" />.</para>
        <para>For example, a two-column report with a one-inch wide detail section would have <b>Width</b> = 1440, 
            and its total width would be 2 * 1440 = 2880.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.MarginLeft">
      <summary>
            Gets or sets the left margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> and <see cref="P:C1.Win.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.MarginRight">
      <summary>
            Gets or sets the right margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> and <see cref="P:C1.Win.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.MarginTop">
      <summary>
            Gets or sets the top margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> and <see cref="P:C1.Win.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.MarginBottom">
      <summary>
            Gets or sets the bottom margin for each page, in twips.
            </summary>
      <remarks>
            The margins are measured in twips, from the edges of the paper. You can select the paper size and orientation using the 
            <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> and <see cref="P:C1.Win.C1Report.Layout.Orientation" /> properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.Columns">
      <summary>
            Gets or sets the number of detail columns.
            </summary>
      <remarks>
        <para>Use this property to create multi-column reports.</para>
        <para>In multi-column reports, header and footer sections span the full width of the report. 
            Only the detail section is rendered in multiple columns. Use the <see cref="P:C1.Win.C1Report.Layout.Width" /> property to specify the width 
            of each column, and the <see cref="P:C1.Win.C1Report.Layout.ColumnLayout" /> property to specify whether columns should be laid out across 
            the page or down the page.</para>
        <para>Multi-column reports are useful for printing reports on mailing labels and other types of multi-column 
            pre-printed forms. They are also useful for creating compact reports where detail information is laid out across 
            the page.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.ColumnLayout">
      <summary>
            Gets or sets the layout for the columns (down or across).
            </summary>
      <seealso cref="T:C1.Win.C1Report.ColumnLayoutEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Layout.PaperSize">
      <summary>
            Gets or sets the paper size for the report.
            </summary>
      <seealso cref="T:System.Drawing.Printing.PaperKind" />
    </member>
    <member name="P:C1.Win.C1Report.Layout.CustomWidth">
      <summary>
            Gets or sets the custom width for the report, in twips.
            </summary>
      <remarks>
        <para>To create reports using custom paper sizes, set the <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> property to 
            <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, then set the <see cref="P:C1.Win.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight" /> properties 
            to the size of the page measured in twips.</para>
        <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> is set to a value other than <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, the paper size 
            is determined by that setting. The <see cref="P:C1.Win.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight" /> properties are not 
            used in this case.</para>
        <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> is set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" /> and the <see cref="P:C1.Win.C1Report.Layout.CustomWidth" /> or 
            <see cref="P:C1.Win.C1Report.Layout.CustomHeight" /> properties are set to zero, the printer's default paper size is used.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.CustomHeight">
      <summary>
            Gets or sets the custom height for the report, in twips.
            </summary>
      <remarks>
        <para>To create reports using custom paper sizes, set the <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> property to 
            <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, then set the <see cref="P:C1.Win.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight" /> properties 
            to the size of the page measured in twips.</para>
        <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> is set to a value other than <see cref="F:System.Drawing.Printing.PaperKind.Custom" />, the paper size 
            is determined by that setting. The <see cref="P:C1.Win.C1Report.Layout.CustomWidth" /> and <see cref="P:C1.Win.C1Report.Layout.CustomHeight" /> properties are not 
            used in this case.</para>
        <para>If the <see cref="P:C1.Win.C1Report.Layout.PaperSize" /> is set to <see cref="F:System.Drawing.Printing.PaperKind.Custom" /> and the <see cref="P:C1.Win.C1Report.Layout.CustomWidth" /> or 
            <see cref="P:C1.Win.C1Report.Layout.CustomHeight" /> properties are set to zero, the printer's default paper size is used.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.Orientation">
      <summary>
            Gets or sets the page orientation.
            </summary>
      <seealso cref="T:C1.Win.C1Report.OrientationEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Layout.PageHeader">
      <summary>
            Gets or sets a value that determines on which pages the Page Header section should be displayed.
            </summary>
      <remarks>
        <para>You can use the <b>PageHeader</b> and <b>PageFooter</b> properties to specify whether a report's page header or 
            page footer should be printed on the same page as a report header or report footer.</para>
        <para>For example, you might not want to print a page header containing the page number on the first page of a report 
            if the report header is a cover sheet.</para>
      </remarks>
      <seealso cref="T:C1.Win.C1Report.HdrFtrEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Layout.PageFooter">
      <summary>
            Gets or sets a value that determines on which pages the Page Footer section should be displayed.
            </summary>
      <seealso cref="T:C1.Win.C1Report.HdrFtrEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Layout.Picture">
      <summary>
            Gets or sets a background picture for the report body.
            </summary>
      <remarks>
        <para>Use the <see cref="P:C1.Win.C1Report.Layout.Picture" /> property to specify a bitmap or other type of graphic to be displayed as a 
            background picture on a report (watermark-style).</para>
        <para>Use the <see cref="P:C1.Win.C1Report.Layout.PictureShow" />, <see cref="P:C1.Win.C1Report.Layout.PictureAlign" />, and <see cref="P:C1.Win.C1Report.Layout.PictureScale" /> properties 
            to specify which pages should display the picture and how it should be aligned and scaled.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.PictureAlign">
      <summary>
            Gets or sets how the background picture is aligned.
            </summary>
      <remarks>
            To select the background picture and which pages should display it, use the <see cref="P:C1.Win.C1Report.Layout.Picture" /> and 
            <see cref="P:C1.Win.C1Report.Layout.PictureShow" /> properties.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Layout.PictureScale">
      <summary>
            Gets or sets how the background picture is aligned.
            </summary>
      <para>This property determines how background images are scaled to fit the page. Depending on the setting of 
            this property, images may be clipped, stretched, scaled (which preserves the image's aspect ratio), tiled, 
            or hidden.</para>
      <para>This property works with the <see cref="P:C1.Win.C1Report.Layout.PictureAlign" /> property so you can control image scaling and 
            alignment independently.</para>
    </member>
    <member name="P:C1.Win.C1Report.Layout.PictureShow">
      <summary>
            Gets or sets where the background picture is displayed.
            </summary>
      <remarks>
            To select the background picture and how it should be aligned on the page, use the <see cref="P:C1.Win.C1Report.Layout.Picture" />,
            <see cref="P:C1.Win.C1Report.Layout.PictureAlign" />, and <see cref="P:C1.Win.C1Report.Layout.PictureScale" /> properties.
            </remarks>
      <seealso cref="T:C1.Win.C1Report.PictureShowEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Layout.LabelSpacingX">
      <summary>
            Used by the designer to discount horizontal label spacing in the design surface.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Layout.LabelSpacingY">
      <summary>
            Used by the designer to discount vertical label spacing in the design surface.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Layout.OverlayReplacements">
      <summary>
            Gets a dictionary (<see cref="T:System.Collections.IDictionary" />) with replacements 
            to be made in the report body.
            </summary>
      <remarks>
        <para>This property is useful when implementing export filters.</para>
        <para>Reports that contain page counts or group page counts save special tags in
            the report body. When the report finishes rendering, these tags need to be replaced
            with the actual page counts. Filters can get the list of tags and the replacement
            values using this dictionary. The key-value pairs in the dictionary contain the
            tags and their replacements.</para>
      </remarks>
      <example>
            The code below shows part of a text filter implementation. The <b>EndReport</b>
            method gets the overlay replacement dictionary and calls a <b>ReplaceInStream</b>
            method that scans each line in the stream and replaces any keys with the 
            corresponding values. For example, the total page count would be represented
            by a key similar to "#pages#", which would be replaced everywhere in the stream
            with the actual page count.
            <code>
            public class MyTextFilter : ExportFilter
            {
              // ...
              override public void EndReport()
              {
                // close output stream
                Layout layout = _ownerReport.GetLayout();
                ReplaceInStream(_exportStream, layout.OverlayReplacements);
                _exportStream.Close();
              }
            }
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.Layout.ParentReport">
      <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report" /> that contains this <see cref="T:C1.Win.C1Report.Layout" /> object.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.ReportParameterCollection">
      <summary>
            Contains a collection of <see cref="T:C1.Win.C1Report.ReportParameter" /> objects.
            </summary>
      <remarks>
            This collection is made available as a parameter in the 
            <see cref="E:C1.Win.C1Report.C1Report.InitializeParametersDialog" /> event, and allows handlers to 
            inspect and modify report parameter values while handling the event.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.ReportParameterCollection.Item(System.String)">
      <summary>
            Gets a report parameter by name.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportParameterCollection.Item(System.Int32)">
      <summary>
            Gets a report parameter by index.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportParameterCollection.Count">
      <summary>
            Gets the number of <see cref="T:C1.Win.C1Report.ReportParameter" /> objects in the collection.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.ReportParameter">
      <summary>
            Represents a parameter in a parameterized report data source.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportParameter.Name">
      <summary>
            Gets the parameter name.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportParameter.Type">
      <summary>
            Gets the parameter type.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportParameter.Value">
      <summary>
            Gets or sets the parameter value.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.IC1ReportRecordset">
      <summary>
            Interface used to access report data from data source objects.
            </summary>
      <remarks>
        <para>Any object that can be used as custom data source for reports must implement this interface.</para>
        <para>The <see cref="T:C1.Win.C1Report.C1Report" /> component provides this implementation for common data sources such
            as <see cref="T:System.Data.DataTable" /> and <see cref="T:System.Data.DataView" /> classes.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetFieldNames">
      <summary>
            Gets a string vector with the names of each field in the data source.
            </summary>
      <returns>A string vector with the names of each field in the data source.</returns>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetFieldTypes">
      <summary>
            Gets a vector with the types of each field in the data source.
            </summary>
      <returns>A vector with the types of each field in the data source.</returns>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetFieldValue(System.Int32)">
      <summary>
            Gets the value of the given field, at the cursor position.
            </summary>
      <param name="fieldIndex">Index of the field.</param>
      <returns>Value of the field.</returns>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.BOF">
      <summary>
            Returns true if the cursor is pointing at the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.EOF">
      <summary>
            Returns true if the cursor is pointing past the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.MoveFirst">
      <summary>
            Moves the cursor to the first record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.MoveLast">
      <summary>
            Moves the cursor to the last record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.MovePrevious">
      <summary>
            Moves the cursor to the previous record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.MoveNext">
      <summary>
            Moves the cursor to the next record in the data source.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.GetBookmark">
      <summary>
            Returns the current cursor position.
            </summary>
      <returns>Index of current record.</returns>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.SetBookmark(System.Int32)">
      <summary>
            Sets the current cursor position to supplied value.
            </summary>
      <param name="bkmk">Index of record.</param>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.ApplyFilter(System.String)">
      <summary>
            Applies a filter string. See the <see cref="P:System.Data.DataView.RowFilter" /> property for details.
            </summary>
      <param name="filter">Filter string.</param>
    </member>
    <member name="M:C1.Win.C1Report.IC1ReportRecordset.ApplySort(System.String)">
      <summary>
            Applies a sort string. See the <see cref="P:System.Data.DataView.Sort" /> property for details.
            </summary>
      <param name="sort">Sort string.</param>
    </member>
    <member name="T:C1.Win.C1Report.DataAccessException">
      <summary>
        <see cref="T:System.Exception" /> that is thrown when a data access error occurs.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataAccessException.#ctor">
      <summary>
            Initializes a new instance of the DataAccessException class.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.DataAccessException.#ctor(System.String)">
      <summary>
            Initializes a new instance of the DataAccessException class with a specified error message.
            </summary>
      <param name="msg">A message that describes the error.</param>
    </member>
    <member name="M:C1.Win.C1Report.DataAccessException.#ctor(System.String,System.Exception)">
      <summary>
            Initializes a new instance of the DataAccessException class with a specified error message 
            and a reference to the inner exception that is the cause of this exception.
            </summary>
      <param name="msg">The error message that explains the reason for the exception.</param>
      <param name="x">The exception that is the cause of the current exception.</param>
    </member>
    <member name="M:C1.Win.C1Report.DataAccessException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
      <summary>
            Initializes a new instance of the DataAccessException class with serialized data.
            </summary>
      <param name="si">The object that holds the serialized object data.</param>
      <param name="sc">The contextual information about the source or destination.</param>
    </member>
    <member name="T:C1.Win.C1Report.FileFormatEnum">
      <summary>
            Specifies the format of the export file.
            </summary>
      <remarks>Use the members of this enumeration to set parameter 
            of the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> method in the <see cref="T:C1.Win.C1Report.C1Report" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.HTML">
      <summary>
            Plain HTML format. This setting creates a single HTML file that can be viewed in any web browser.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.HTMLPaged">
      <summary>
            Paged HTML format. This setting creates one HTML file for each page in the report, with links to navigate between pages.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.HTMLDrillDown">
      <summary>
            Drill-down HTML format. This setting creates a single HTML file with collapsible headings. When viewed in a 
            DHTML-capable browser, clicking group headers causes them to collapse and expand to show the detail.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.PDF">
      <summary>
        <para>Adobe PDF format. This setting creates a PDF file that can be viewed using Adobe Acrobat software.</para>
        <para>The PDF file includes an outline tree that is generated automatically based on the report structure.</para>
        <para>Each node in the tree corresponds to a group header section in the report.
            Invisible group header sections do not generate outline entries in the PDF document.</para>
      </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.PDFEmbedFonts">
      <summary>
            Adobe PDF format with embedded fonts. This setting creates a PDF file that can be viewed using Adobe Acrobat software.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.Text">
      <summary>
            Plain text. This setting creates a plain ASCII file.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.RTF">
      <summary>
            RTF format. This setting creates an RTF file that can be opened in Microsoft Word, WordPad, or any other 
            RTF-capable text editor.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.Excel">
      <summary>
            Microsoft Excel files. This setting creates a BIFF-8 Excel file that can be opened with Microsoft Excel 97 or later.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.TIFF">
      <summary>
            TIFF format. This setting creates multi-page TIFF files.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.PDFPrintUtil">
      <summary>
            Deprecated. Use PDF, PDFEmbedFonts, or PDFProcted instead. 
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.PDFProtected">
      <summary>
            Protected PDF format. This setting creates a PDF file with a random password. The file can be opened and printed
            by anyone, but cannot be modified.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.RTFLabels">
      <summary>
            RTF field-based format. This setting creates RTF files with absolutely-positioned fields. This format renders reports 
            more accurately than the plain RTF format, and is recommended for creating label-style reports.
            However, the files created with this setting are harder to edit than the plan RTF format, and can only be 
            previewed or printed correctly using Microsoft Word (this format doesn't work with WordPad).
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.TextSinglePage">
      <summary>
            Plain text. This setting creates a plain ASCII file as a single page.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.Metafile">
      <summary>
            Compressed metafile. This setting creates a zip file containing one metafile (emf) per page. The default
            file extensions for this format are "zip" or "emz".
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.C1PrintDocument">
      <summary>
            Export into a C1PrintDocument.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.FileFormatEnum.OpenXml">
      <summary>
            OpenXml file. This setting creates an OpenXml Excel file that can be opened with Microsoft Excel 2007 or later.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.GrowShrinkModeEnum">
      <summary>
            Specifies the logic for handling CanGrow/CanShrink fields.
            </summary>
      <remarks>
            Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.C1Report.GrowShrinkMode" /> property in the <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report" /> class.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report">
      <summary>
            Uses the standard C1Report mode, where fields that grow or shrink affect only fields directly below.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.GrowShrinkModeEnum.Access">
      <summary>
            Uses a mode that is similar to MS Access, where fields that grow or shrink affect all fields below, 
            even if they are off to the side of the field that grew or shrank.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.C1Report">
      <summary>
            The <b>C1Report</b> component generates Access-style, data-based banded reports that can be rendered 
            directly to a printer, exported to various portable formats (including HTML, PDF, and text), or rendered 
            into preview controls such as the Microsoft PrintPreview or ComponentOne C1PrintPreview controls.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.#ctor">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.C1Report" /> component.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.#ctor(System.String)">
      <summary>
            This method is intended for internal use only.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.BeginInit">
      <summary>
            Signals the object that initialization is starting.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.EndInit">
      <summary>
            Signals the object that initialization is complete.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.GetReportList(System.String)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="fileName">Contains the full name of the XML report definition file.</param>
      <returns>A string array containing the names of all reports in the XML file.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.GetReportList(System.Xml.XmlDocument)">
      <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to <see cref="T:System.Xml.XmlDocument" /> object.</param>
      <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.GetReportInfo(System.String)">
      <summary>
            Gets a list of reports available in an XML report definition file.
            </summary>
      <param name="fileName">Contains the full name of the XML report definition file.</param>
      <returns>A string array containing the names of all reports in the XML file.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.GetReportInfo(System.Xml.XmlDocument)">
      <summary>
            Gets a list of reports available in an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument" /> that contains the reports.</param>
      <returns>A string array containing the names of all reports in the <b>XmlDocument</b>.</returns>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Load(System.String,System.String)">
      <summary>
            Loads a report from an XML report definition file.
            </summary>
      <param name="fileName">Full name of the XML report definition file.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.Win.C1Report.C1Report.GetReportInfo(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Load(System.Xml.XmlDocument,System.String)">
      <summary>
            Loads a report from an <see cref="T:System.Xml.XmlDocument" />.
            </summary>
      <param name="doc">Reference to the <see cref="T:System.Xml.XmlDocument" /> that contains the reports.</param>
      <param name="reportName">Name of the report to retrieve from the file (case-insensitive).</param>
      <remarks>
            You can get a list of reports available in the file using the <see cref="M:C1.Win.C1Report.C1Report.GetReportInfo(System.String)" /> method. 
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Save(System.String)">
      <summary>
            Saves the current report definition to a file. 
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Save(System.String,System.Boolean)">
      <summary>
            Saves the current report definition to a file.
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <param name="embedAll">Whether to embed images and subreports into the output file.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Save(System.String,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to a file.
            </summary>
      <param name="fileName">Full name of the file to be created (if the file already exists, it will be overwritten).</param>
      <param name="embedPics">Whether to embed images into the output file.</param>
      <param name="embedSubs">Whether to embed subreports into the output file.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Save(System.Xml.XmlTextWriter)">
      <summary>
            Saves the current report definition to an <see cref="T:System.Xml.XmlTextWriter" /> object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlTextWriter" /> object where the report definition will be saved.</param>
      <remarks>
            This method does not embed pictures and subreports into the output file. It only saves subreport names and saves
            images in external files.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean)">
      <summary>
            Saves the current report definition to an XmlTextWriter object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlTextWriter" /> object where the report definition will be saved.</param>
      <param name="embed">Whether to embed images and subreports into the output stream.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Save(System.Xml.XmlTextWriter,System.Boolean,System.Boolean)">
      <summary>
            Saves the current report definition to an XmlTextWriter object.
            </summary>
      <param name="writer">An <see cref="T:System.Xml.XmlTextWriter" /> object where 
            the report definition will be saved.</param>
      <param name="embedPics">Whether to embed images into the output stream.</param>
      <param name="embedSubs">Whether to embed subreports into the output stream.</param>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Clear">
      <summary>
            Clears the current report.
            </summary>
      <remarks>
        <para>This method removes all groups, group sections, and fields from the current report.</para>
        <para>It also resets the <see cref="P:C1.Win.C1Report.C1Report.DataSource" /> and <see cref="P:C1.Win.C1Report.C1Report.Layout" /> objects, and clears
            (but does not remove) the fixed sections that all reports have: <b>Detail</b>, <b>Header</b>, 
            <b>Footer</b>, <b>PageHeader</b>, and <b>PageFooter</b>.</para>
        <para>Use this method when you want to clear a report and start creating a new one from scratch.
            </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Evaluate(System.String)">
      <summary>
            Evaluates a <b>VBScript</b> expression in the current report context.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be evaluated.</param>
      <returns>The value of the expression.</returns>
      <remarks>
        <para>Use this method to evaluate expressions as they would be evaluated while generating a report.
            This can be useful in designer-type applications, to provide an "Immediate Window" where users can test 
            expressions.</para>
        <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
      </remarks>
      <example>
        <para>Expressions may contain simple <b>VBScript</b> expressions such as:</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("2+2"));
              <i>4</i>
            Console.WriteLine(_c1r.Evaluate(" \"A\" &amp; \"B\" ");
              <i>AB</i></code>
        <para>Expressions may also contain references to the <b>Report</b> object and all its sub-objects. For example:</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.RecordSource"));
              <i>SELECT * FROM Employees</i>
            Console.WriteLine(_c1r.Evaluate("Report.DataSource.Recordset.Fields.Count"));
              <i>7</i>
            Console.WriteLine(_c1r.Evaluate("Report.Fields(0).Name"));
              <i>FirstNameField</i></code>
        <para>Finally, data fields, <see cref="T:C1.Win.C1Report.Field" />, and <see cref="T:C1.Win.C1Report.Section" /> objects may be referenced directly by name.</para>
        <code>
            Console.WriteLine(_c1r.Evaluate("FirstNameField.Value"));
              <i>Andrew</i>
            Console.WriteLine(_c1r.Evaluate("CategoryName"));
              <i>Beverages</i></code>
      </example>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Execute(System.String)">
      <summary>
            Executes a <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with <b>VBScript</b> instructions to be executed.</param>
      <remarks>
        <para>This method is similar to the <see cref="M:C1.Win.C1Report.C1Report.Evaluate(System.String)" /> method, except it does not return a value.</para>
        <para>If the <b>expression</b> string contains invalid syntax or causes an evaluation error, the control 
            raises the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event. In this case, the <i>Handled</i> parameter of the event
            is set to true, so the exception is ignored by default.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.ParseExpression(System.String)">
      <summary>
            Parses a <b>VBScript</b> expression in the current report context.
            </summary>
      <param name="expression">A string with a <b>VBScript</b> expression to be parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the expression is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.ParseStatement(System.String)">
      <summary>
            Parses a <b>VBScript</b> statement in the current report context.
            </summary>
      <param name="statement">A string with a <b>VBScript</b> statement to be parsed.</param>
      <returns>An <see cref="T:System.Exception" /> if the statement is invalid, or null if no errors
            were detected.</returns>
      <remarks>
            This method is useful for providing <b>VBScript</b> syntax-checking in designer applications.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.Render">
      <summary>
            Renders the report into an internal collection of images.
            </summary>
      <remarks>
        <para>This method is called implicitly when other classes access the <see cref="P:C1.Win.C1Report.C1Report.Document" /> 
            property, so you rarely have to call <see cref="M:C1.Win.C1Report.C1Report.Render" /> directly from your code.</para>
        <para>In some cases, you may want to access the report as a collection of pages,
            exposed by the <see cref="P:C1.Win.C1Report.C1Report.PageImages" /> property. To ensure that the image collection
            is available and up-to-date, call the <see cref="M:C1.Win.C1Report.C1Report.Render" /> method directly.
            </para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum)">
      <summary>
            Renders the report into a <see cref="T:System.IO.Stream" /> object.
            </summary>
      <param name="stream">Stream that will contain the report.</param>
      <param name="fmt">Report format to insert into the output stream.</param>
      <remarks>
        <para>This method is especially useful in ASP.NET scenarios where you want to render reports into 
            Html or Pdf streams, without creating temporary files.</para>
        <para>Not all types of report can be rendered into streams. The Excel format requires OLE compound 
            files and can only be rendered into files.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.RenderToStream(System.IO.Stream,C1.Win.C1Report.FileFormatEnum,System.String,System.String)">
      <summary>
            Renders the report into an Html <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">Stream that will contain the report.</param>
      <param name="fmt">Report format to insert into the output stream.</param>
      <param name="idPrefix">Unique ID used to differentiate multiple reports stored in the same stream.</param>
      <param name="fileName">Base file name used to build temporary image files.</param>
      <remarks>
            This method is used by the C1WebReport control to generate Html reports in ASP.NET pages.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)">
      <summary>
            Renders the report into a file.
            </summary>
      <param name="fileName">Name of the file that will contain the report.</param>
      <param name="fmt">Type of file to create.</param>
      <remarks>
            This method causes the control to render the current report into a file. It is especially useful in server applications 
            that create several reports in batch mode, and don't have a user interface.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)">
      <summary>
            Renders the report into an <see cref="T:C1.Win.C1Report.ExportFilter" /> object.
            </summary>
      <param name="filter">Export filter that will render the report.</param>
      <remarks>
        <para>
          <see cref="T:C1.Win.C1Report.C1Report" /> includes several built-in export filters that allow you to export reports 
            to HTML, PDF, RTF, Excel, and other formats.</para>
        <para>You may create your own filters by creating classes that derive from any of these base filters.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.CopyFrom(C1.Win.C1Report.C1Report)">
      <summary>
            Copies a report definition from another <see cref="T:C1.Win.C1Report.C1Report" /> component.
            </summary>
      <param name="sourceReport">
        <see cref="T:C1.Win.C1Report.C1Report" /> that contains the report to be copied.</param>
      <remarks>
            This method is equivalent to copying the <see cref="P:C1.Win.C1Report.C1Report.ReportDefinition" /> property from one 
            <see cref="T:C1.Win.C1Report.C1Report" /> to another, but is substantially faster.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.AddScriptObject(System.String,System.Object)">
      <summary>
            Adds an object to the report's script context.
            </summary>
      <param name="name">Name of the new object (case-insensitive).</param>
      <param name="value">Value of the new object.</param>
      <remarks>
        <para>This method allows you to add custom objects to the context of the <see cref="T:C1.Win.C1Report.C1Report" /> 
            script interpreter.</para>
        <para>The script interpreter context is cleared whenever a report starts rendering, so this method 
            should always be called from the <see cref="E:C1.Win.C1Report.C1Report.StartReport" /> event handler.</para>
      </remarks>
      <example>
        <para>The code below uses the <see cref="E:C1.Win.C1Report.C1Report.StartReport" /> event to add a variable called 
            "mainForm" to the script context. It then attaches some script to the report's <see cref="P:C1.Win.C1Report.C1Report.OnOpen" /> 
            event to show the caption of the form when the report starts rendering.</para>
        <code>
            private void _c1r_StartReport(object sender, System.EventArgs e)
            {
                _c1r.AddScriptObject("mainForm", this);
            }
            private void button1_Click(object sender, System.EventArgs e)
            {
                _c1r.OnOpen = "msgbox(mainForm.Text)";
                _c1r.Render();
            }
            </code>
      </example>
    </member>
    <member name="M:C1.Win.C1Report.C1Report.AddScriptObject(System.String,System.Object,System.Boolean)">
      <summary>
            Adds an object to the report's script context.
            </summary>
      <param name="name">Name of the new object (case-insensitive).</param>
      <param name="value">Value of the new object.</param>
      <param name="addToSubreports">Whether to add the object to the script context of all subreports as well.</param>
      <remarks>
        <para>This method allows you to add custom objects to the context of the <see cref="T:C1.Win.C1Report.C1Report" /> 
            script interpreter.</para>
        <para>The script interpreter context is cleared whenever a report starts rendering, so this method 
            should always be called from the <see cref="E:C1.Win.C1Report.C1Report.StartReport" /> event handler.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.StartReport">
      <summary>
            Fired when the control starts rendering the report, before it opens the source recordset.
            </summary>
      <remarks>
        <para>You can use this event to provide user feedback or to make changes to the 
            <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> and 
            <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> properties.</para>
        <para>For example, you may implement your own version of parameterized queries by asking the 
            user to provide some information and changing the <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> 
            property accordingly.</para>
        <para>You may also use this event to assign a <see cref="T:System.Data.DataTable" /> object directly to the 
            report's <see cref="P:C1.Win.C1Report.DataSource.Recordset" /> property. Applications that already have the 
            report data should do this to save time by preventing <see cref="T:C1.Win.C1Report.C1Report" /> from loading its own copy 
            of the data.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.EndReport">
      <summary>
            Fired when the control finishes rendering the report.
            </summary>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.NoData">
      <summary>
            Fired when the control starts rendering a report and the data source is empty.
            </summary>
      <remarks>
        <para>You can use this event to cancel rendering a report when the source recordset is empty.</para>
        <para>If you don't cancel the report, it will be rendered as an unbound report (a self-contained report 
            with no underlying data).</para>
      </remarks>
      <example>
            The code below cancels a report when it has no data:
            <code>
            private void c1r_NoData(object sender, EventArgs e)
            {
                _c1r.Cancel = true;
            }
            </code></example>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.StartPage">
      <summary>
            Fired when the control starts rendering each page.
            </summary>
      <remarks>
        <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
        <para>You can use the <see cref="P:C1.Win.C1Report.C1Report.Cancel" /> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.Win.C1Report.C1Report.MaxPages" /> property instead.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.EndPage">
      <summary>
            Fired when the control finishes rendering each page.
            </summary>
      <remarks>
        <para>This event is useful for updating the user interface to show how many pages have been printed so far.</para>
        <para>You can use the <see cref="P:C1.Win.C1Report.C1Report.Cancel" /> property while handling this event to cancel rendering the report.
            To limit the number of pages that can be printed, use the <see cref="P:C1.Win.C1Report.C1Report.MaxPages" /> property instead.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.StartSection">
      <summary>
            Fired before each <see cref="T:C1.Win.C1Report.Section" /> is formatted.
            </summary>
      <remarks>
        <para>When this event fires, the report fields have not been updated with the current values or sizes.</para>
        <para>This is a good point to set field formatting parameters and visibility based on the current data values.</para>
        <para>This event is equivalent to the <see cref="P:C1.Win.C1Report.Section.OnFormat" /> script property.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.PrintSection">
      <summary>
            Fired before each <see cref="T:C1.Win.C1Report.Section" /> is printed (after it has been formatted.)
            </summary>
      <remarks>
        <para>When this event fires, the field values and sizes have been set by the control.</para>
        <para>You may still make changes, but they will not affect the field layout. For example, changing a field's 
            <see cref="P:C1.Win.C1Report.Field.Text" /> property at this point will not cause it to grow or shrink.</para>
        <para>This event is equivalent to the <see cref="P:C1.Win.C1Report.Section.OnPrint" /> script property.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.EndSection">
      <summary>
            Fired when the control finishes rendering each <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.ReportError">
      <summary>
            Fired when an error occurs while rendering a report.
            </summary>
      <remarks>
        <para>The most common types of errors found when rendering reports are:</para>
        <para>1) Invalid <see cref="P:C1.Win.C1Report.DataSource.ConnectionString" /> or <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> parameters. 
            This usually indicates that the system could not open the specified database (a server may be off line, or 
            a database file may be in a different location than what was specified) or that the SQL syntax used for the 
            <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property contains errors.</para>
        <para>2) Error executing scripts or evaluating expressions. This usually indicates that the VBScript expression 
            used contains a syntax error. In these cases, make sure you look at the exception message. It usually contains a 
            good explanation of what caused the error.</para>
      </remarks>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.InitializeParametersDialog">
      <summary>
            Fired before the control displays the <b>Report Parameters</b> dialog.
            </summary>
      <remarks>
        <para>Reports that have a <b>PARAMETERS</b> clause in their <see cref="P:C1.Win.C1Report.DataSource.RecordSource" /> property 
            show a dialog where the user can enter report parameters.</para>
        <para>This event fires before the dialog is displayed and allows you to customize the dialog by changing 
            its caption, font, colors, etc.</para>
        <para>You can also use this event to inspect and modify parameter values using the 
            <see cref="F:C1.Win.C1Report.DialogEventArgs.Parameters" /> collection.</para>
        <para>Finally, you can use the <see cref="F:C1.Win.C1Report.DialogEventArgs.ShowDialog" /> property to prevent the component
            from showing the parameters dialog.</para>
      </remarks>
      <example>
            The code below uses the <b>InitializeParametersDialog</b> event to modify the values
            of the report parameters and suppress the display of the parameter dialog.
            <code>
            private void c1Report1_InitializeParametersDialog(object sender, 
                     C1.Win.C1Report.DialogEventArgs e)
            {
              // change parameter values
              ReportParameterCollection p = e.Parameters;
              p["TheString"].Value = "east";
              p["TheNumber"].Value = 12;
              p["TheDate"].Value   = DateTime.Now;
              p["TheBool"].Value   = true;
              
              // don't show dialog
              e.ShowDialog = false;
            }
            </code></example>
    </member>
    <member name="E:C1.Win.C1Report.C1Report.AddOutlineEntry">
      <summary>
            Fired before the control adds an outline entry to the report.
            </summary>
      <remarks>
        <para>Some report output formats include an outline that is built Based on the report groups. For example, PDF
            reports show this outline on the left pane of the reader application.</para>
        <para>The outline contains one entry for each group header, and the entry text is based on the value of
            the <see cref="P:C1.Win.C1Report.Group.GroupBy" /> expression for the group.</para>
        <para>This event allows you to change or suppress the text that appears on the outline.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.ReportName">
      <summary>
            Gets or sets the name of the report (used with the Load method).
            </summary>
      <remarks>
        <para>This property identifies the report when it is saved in a report definition file.</para>
        <para>To retrieve a report from a report definition file, use the <see cref="M:C1.Win.C1Report.C1Report.Load(System.String,System.String)" /> method 
            and pass this name as a parameter.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.ReportInfo">
      <summary>
            Gets or sets a <see cref="P:C1.Win.C1Report.C1Report.ReportInfo" /> object containing report metadata.
            </summary>
      <remarks>
        <para>Reports may include general information such as a title, author, and keywords.</para>
        <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.DataSource">
      <summary>
            Gets a reference to the report's <see cref="P:C1.Win.C1Report.C1Report.DataSource" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Layout">
      <summary>
            Gets a reference to the report's <see cref="P:C1.Win.C1Report.C1Report.Layout" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Font">
      <summary>
            Gets or sets the default font for new fields.
            </summary>
      <remarks>
            This property is not used directly when rendering the report. It is used as the default font for new fields.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.MaxPages">
      <summary>
            Gets or sets the maximum number of pages allowed for a report.
            </summary>
      <remarks>
        <para>This property is useful if you want to limit the maximum number of pages in a report.</para>
        <para>For example, you may write a report designer with a preview window that shows only the first 
            five pages of a report.</para>
        <para>Setting this property to zero allows reports of any length.</para>
        <para>You can also limit the size of reports by setting the 
            <see cref="P:C1.Win.C1Report.DataSource.MaxRecords" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.DoEvents">
      <summary>
            Specifies whether the control should handle Windows messages while rendering reports.
            </summary>
      <remarks>
        <para>Setting this property to true allows users to resize forms, click buttons, etc. while reports are 
            being generated. This makes applications more responsive, and is necessary if you want to provide a 
            "Cancel Report" button (otherwise users wouldn't be able to click the button until the report was done).</para>
        <para>Setting this property to false will cause reports to render slightly faster.</para>
      </remarks>
      <example>
        <para>The code below implements "Render" and a "Cancel" buttons attached to a <see cref="T:C1.Win.C1Report.C1Report" /> component.</para>
        <para>The "Render" button checks whether the <see cref="T:C1.Win.C1Report.C1Report" /> component is busy before starting to render a report.
            This is necessary because the user could click the "Render" button several times in a row, before the component got a 
            chance to finish rendering the report. (Calling the <see cref="M:C1.Win.C1Report.C1Report.Render" /> method while the component is busy throws an 
            <see cref="T:System.Exception" />).</para>
        <para>The "Cancel" button checks whether the component is rendering a report and sets the <see cref="P:C1.Win.C1Report.C1Report.Cancel" /> 
            property to true.</para>
        <code>
            _c1r.DoEvents = true;
            
            private void Render_Click(object sender, EventArgs e)
            {
               if (_c1r.IsBusy)
               {
                   Console.WriteLine("Cannot render now, component is busy");
               } 
               else 
               {
                   ppv.Document = c1r.Document;
               } 
            }
            private void Cancel_Click(object sender, EventArgs e) 
            {
               if (_c1r.IsBusy) 
               {
                   _c1r.Cancel = true;
               } 
               else 
               {
                   Console.WriteLine("No report to cancel");
               }
            }
            </code>
      </example>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.OnOpen">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.Win.C1Report.C1Report.StartReport" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering starts.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.OnClose">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report finishes rendering.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.Win.C1Report.C1Report.EndReport" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a message on the main window when rendering finishes.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that resets global variables in the VBScript context 
            when a report starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.OnNoData">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when the report starts rendering and its source recordset is empty.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.Win.C1Report.C1Report.NoData" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to cancel rendering reports with no data.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when the source recordset is 
            empty.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.OnPage">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when a new page is created.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.Win.C1Report.C1Report.StartPage" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to update a label showing how many pages have been rendered so far.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that updates a variable at every page break.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.OnError">
      <summary>
            Gets or sets the <b>VBScript</b> that is executed when an error occurs.
            </summary>
      <remarks>
        <para>The control also fires the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event at this time.</para>
        <para>The difference between the regular event and the VBScript property is that the handler for the regular event 
            belongs to the application, and should thus be used to support tasks that are independent of the report.
            For example, to display a an application dialog box when an error occurs.</para>
        <para>The VBScript handler in the property belongs to the report, and will be executed regardless of the application.
            For example, a report might contain a VBScript handler that changes the value of a field when an error occurs.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Page">
      <summary>
            Gets or sets the current page number.
            </summary>
      <remarks>
        <para>This property is a global variable available to <b>VBScript</b> expressions.</para>
        <para>It is automatically initialized by the control with the value 1 when a report starts rendering, 
            and it is automatically incremented after each page break.</para>
        <para>This property is read-write, so you can reset it using scripts. For example, you can reset the
            current page to 1 whenever a new group starts rendering.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Cancel">
      <summary>
            Specifies whether to cancel generation of the current report.
            </summary>
      <remarks>
            Setting this property to true while a report is being generated stops the report generation process.
            Any pages already created are kept in the document and can be previewed or printed by an attached
            print preview control.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.IsBusy">
      <summary>
            Gets a value that determines whether a report is currently being generated.
            </summary>
      <remarks>
        <para>Use this property to determine whether the control is currently busy generating a report.</para>
        <para>This property is especially useful when the <see cref="P:C1.Win.C1Report.C1Report.DoEvents" /> property is set to true. 
            In this case, the application continues to process user input while the control generates reports, 
            and there is a change that the user might try to start another report before the current one is done.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Tag">
      <summary>
            Gets or sets extra data needed by the calling program.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.ParentReport">
      <summary>
            Gets the main report that contains this subreport (null for main reports).
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Document">
      <summary>
            Gets a <see cref="T:System.Drawing.Printing.PrintDocument" /> object that can be used to render the report to a printer or 
            into a print preview control.
            </summary>
      <example>
            The examples below show how you can use the <see cref="P:C1.Win.C1Report.C1Report.Document" /> property to print the report 
            or show it in a <see cref="T:System.Windows.Forms.PrintPreviewDialog" /> control.
            <code>
            // print the report to the default printer
            _c1r.Document.Print();
            
            // show the report in a PrintPreviewDialog
            PrintPreviewDialog p = new PrintPreviewDialog():
            p.Document = _c1r.Document;
            p.ShowDialog();
            </code></example>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.PageImages">
      <summary>
            Gets a list of <see cref="T:System.Drawing.Imaging.Metafile" /> objects that correspond to the pages in the report.
            </summary>
      <remarks>
            Use the <see cref="M:C1.Win.C1Report.C1Report.Render" /> method to create or refresh the page images.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Groups">
      <summary>
            Gets a collection with all the groups in the report.
            </summary>
      <remarks>
        <para>The <b>Groups</b> collection contains all <see cref="T:C1.Win.C1Report.Group" /> objects defined in the current report.</para>
        <para>Removing a <b>Group</b> from the collection also removes its associated header and footer sections, as well 
            as any fields in those sections.</para>
        <para>Adding a <b>Group</b> to the collection adds the corresponding group header and footer sections to the report.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Sections">
      <summary>
            Gets the collection of <see cref="T:C1.Win.C1Report.Section" /> objects in the report definition.
            </summary>
      <remarks>
            This collection always contains at least five items, which correspond to the standard report 
            sections that are always present: Detail, Header, Footer, PageHeader, and PageFooter.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.Fields">
      <summary>
            Gets the collection of <see cref="T:C1.Win.C1Report.Field" /> objects in the report definition.
            </summary>
      <remarks>
            The <see cref="T:C1.Win.C1Report.Section" /> object also contains a collection of fields in that section.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.ReportDefinition">
      <summary>
            Gets or sets an Xml string containing the complete report definition.
            </summary>
      <remarks>
            This property can be used to store report definitions into databases, to place them in the clipboard, 
            or to copy reports from one <see cref="T:C1.Win.C1Report.C1Report" /> component to another.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.OutlineRootLevel">
      <summary>
            Gets or sets the starting outline level for the groups in this report.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.Win.C1Report.C1Report" /> creates an outline based on the report groups. 
            The outline starts at level zero, and is visible in PDF versions of the report.</para>
        <para>This property allows you to start the report at a custom level, which can be useful 
            if you are rendering multiple reports into a larger document (using C1PrintDocument for example).</para>
        <para>You can set this property to -1 to suppress the outline.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.LabelOffset">
      <summary>
            Gets or sets the position of the first label on a partially used sheet.
            </summary>
      <remarks>
            This property allows you to print labels on partially used label sheets. For example, 
            if you have a sheet with 12 labels and have already used 5, set the <b>LabelOffset</b> 
            property to 6 in order to skip the labels that have already been used.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.GrowShrinkMode">
      <summary>
            Gets or sets the method used to process CanGrow/CanShrink fields.
            </summary>
      <remarks>
        <para>If this property is set to <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report" />, fields with 
            <see cref="P:C1.Win.C1Report.Field.CanGrow" /> or <see cref="P:C1.Win.C1Report.Field.CanShrink" /> properties set to true will move fields directly 
            below them when they grow or shrink. Fields located below but off to the side are not moved.</para>
        <para>If this property is set to <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.Access" />, fields that grow or shrink will 
            affect all fields below, even those which are not directly under the field that was modified as a result of 
            <b>CanGrow</b>/<b>CanShrink</b>. (This is the Microsoft Access behavior).</para>
        <para>For example, if fields are arranged in a grid layout and <see cref="P:C1.Win.C1Report.C1Report.GrowShrinkMode" /> is set to 
            <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.Access" />, fields within each row will remain vertically aligned when fields 
            above them grow or shrink.</para>
        <para>If <see cref="P:C1.Win.C1Report.C1Report.GrowShrinkMode" /> is set to <see cref="F:C1.Win.C1Report.GrowShrinkModeEnum.C1Report" />, fields within each 
            column will move independently of fields in other columns, and fields within each row will not remain vertically 
            aligned.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.UsePrinterResolution">
      <summary>
            Specifies whether the component should use the .NET printing support to obtain high-resolution graphics.
            </summary>
      <remarks>
        <para>By default, <see cref="T:C1.Win.C1Report.C1Report" /> scans the installed printers in order to 
            obtain a high-resolution reference <see cref="T:System.Drawing.Graphics" /> object.</para>
        <para>Set this property to false in order to bypass this process and use the
            screen resolution when generating reports. This will increase report rendering
            speed (in some cases) with some loss in layout accuracy.</para>
        <para>Under certain circumstances, notably when running under Windows Services, 
            the .NET printing support does not work correctly, and trying to enumerate the 
            installed printers may cause memory allocation problems. In these situations,
            setting this property to false is necessary.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.IgnoreScriptErrors">
      <summary>
            Specifies whether the component should ignore script errors by default.
            </summary>
      <remarks>
        <para>When the script interpreter finds an error in a script or expression, the 
            component raises the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event. This property specifies
            the default value for the <b>Handled</b> parameter in that event.</para>
        <para>If <b>IgnoreScriptErrors</b> is set to true, script errors are ignored
            by default (the <b>Handled</b> parameter is initialized to true).</para>
        <para>If <b>IgnoreScriptErrors</b> is set to false, script errors throw
            exceptions by default (the <b>Handled</b> parameter is initialized to false).</para>
        <para>In either case, the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event handler may override 
            the default by changing the value of the <b>Handled</b> parameter.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.C1Report.ExposeScriptObjects">
      <summary>
            Specifies whether script objects added with the <see cref="M:C1.Win.C1Report.C1Report.AddScriptObject(System.String,System.Object)" /> 
            method should be exposed to subreports.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.C1Report.EditExpressionDelegate">
      <summary>
            Type of delegate used to specify custom handlers for script editors.
            </summary>
      <remarks>
        <para>When <see cref="T:C1.Win.C1Report.C1Report" /> component is used with a <see cref="T:System.Windows.Forms.PropertyGrid" /> 
            control, the property grid uses custom type editors to provide user interface elements 
            for editing scripts, statements, and data source properties.</para>
        <para>This delegate allows report designer applications to provide their own user 
            interface for editing these elements.</para>
        <para>For examples of how these delegates are used, please see the source code
            for the <b>C1ReportDesigner</b> application, included with the C1Report Designer
            Edition.</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.C1Report.EditDataSourceDelegate">
      <summary>
            Type of delegate used to specify custom handlers for data source editors.
            </summary>
      <remarks>
        <para>When <see cref="T:C1.Win.C1Report.C1Report" /> component is used with a <see cref="T:System.Windows.Forms.PropertyGrid" /> 
            control, the property grid uses custom type editors to provide user interface elements 
            for editing scripts, statements, and data source properties.</para>
        <para>This delegate allows report designer applications to provide their own user 
            interface for editing these elements.</para>
        <para>For examples of how these delegates are used, please see the source code
            for the <b>C1ReportDesigner</b> application, included with the C1Report Designer
            Edition.</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.ReportEventHandler">
      <summary>
            Represents the method that will handle <see cref="E:C1.Win.C1Report.C1Report.StartPage" />, <see cref="E:C1.Win.C1Report.C1Report.EndPage" />, 
            <see cref="E:C1.Win.C1Report.C1Report.StartSection" />, <see cref="E:C1.Win.C1Report.C1Report.PrintSection" />, <see cref="E:C1.Win.C1Report.C1Report.EndSection" />,
            <see cref="E:C1.Win.C1Report.C1Report.ReportError" />, and <see cref="E:C1.Win.C1Report.C1Report.AddOutlineEntry" /> events.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.ReportEventArgs">
      <summary>
            Provides data for <see cref="E:C1.Win.C1Report.C1Report.StartPage" />, <see cref="E:C1.Win.C1Report.C1Report.EndPage" />, <see cref="E:C1.Win.C1Report.C1Report.StartSection" />, 
            <see cref="E:C1.Win.C1Report.C1Report.PrintSection" />, <see cref="E:C1.Win.C1Report.C1Report.EndSection" />, <see cref="E:C1.Win.C1Report.C1Report.ReportError" />, and
            <see cref="E:C1.Win.C1Report.C1Report.AddOutlineEntry" /> events.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ReportEventArgs.Page">
      <summary>
            The current page.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ReportEventArgs.Section">
      <summary>
            The current section.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ReportEventArgs.Exception">
      <summary>
        <see cref="F:C1.Win.C1Report.ReportEventArgs.Exception" /> that caused the error.
            </summary>
      <remarks>
            This property is only used with the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.ReportEventArgs.Handled">
      <summary>
            Gets or sets a value that indicates whether the component should throw the <see cref="F:C1.Win.C1Report.ReportEventArgs.Exception" /> 
            that was detected or whether it should ignore the error and continue rendering the report.
            </summary>
      <remarks>
            This property is only used with the <see cref="E:C1.Win.C1Report.C1Report.ReportError" /> event.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.ReportEventArgs.Text">
      <summary>
            Gets or sets the text that will be used as an outline entry.
            </summary>
      <remarks>
            This property is only used with the <see cref="E:C1.Win.C1Report.C1Report.AddOutlineEntry" /> event.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Report.DialogEventHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Report.C1Report.InitializeParametersDialog" /> event.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.DialogEventArgs">
      <summary>
            Provides data for <see cref="E:C1.Win.C1Report.C1Report.InitializeParametersDialog" /> event.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.DialogEventArgs.Dialog">
      <summary>
            Reference to a <see cref="T:C1.Win.C1Report.DialogEventArgs" /> that is about to be displayed.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.DialogEventArgs.ShowDialog">
      <summary>
            Gets or sets a value that determines whether the component should display the parameters dialog.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.DialogEventArgs.Parameters">
      <summary>
            Gets the collection of parameters defined by the report.
            </summary>
      <remarks>
            TODO
            </remarks>
    </member>
    <member name="T:C1.Win.C1Report.AddOutlineEntryHandler">
      <summary>
            Represents the method that will handle the <see cref="E:C1.Win.C1Report.C1Report.AddOutlineEntry" /> event.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.ReportInfo">
      <summary>
            Class that contains report metadata.
            </summary>
      <remarks>
        <para>Reports may include general information such as a title, author, and keywords.</para>
        <para>Such global information about the document itself (as opposed to its content or 
            structure) is called metadata, and is intended to assist in cataloguing and 
            searching for reports and report definitions in external databases.</para>
      </remarks>
    </member>
    <member name="M:C1.Win.C1Report.ReportInfo.Clear">
      <summary>
            Clears the <see cref="T:C1.Win.C1Report.ReportInfo" /> object.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.ReportInfo.Clone">
      <summary>
            Returns a copy of this <see cref="T:C1.Win.C1Report.ReportInfo" /> object.
            </summary>
      <returns>A copy of this <see cref="T:C1.Win.C1Report.ReportInfo" /> object.</returns>
    </member>
    <member name="M:C1.Win.C1Report.ReportInfo.ToString">
      <summary>
            Returns a string that represents the current <see cref="T:C1.Win.C1Report.ReportInfo" /> object.
            </summary>
      <returns>Returns a string that represents the current <see cref="T:C1.Win.C1Report.ReportInfo" /> object.</returns>
    </member>
    <member name="P:C1.Win.C1Report.ReportInfo.Author">
      <summary>
            Gets or sets the name of the person that created the report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportInfo.Title">
      <summary>
            Gets or sets the title of the report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportInfo.Subject">
      <summary>
            Gets or sets the subject of the report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportInfo.Keywords">
      <summary>
            Gets or sets keywords associated with the report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.ReportInfo.Creator">
      <summary>
            Gets or sets the name of the application that created the report.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.SectionTypeEnum">
      <summary>
            Specifies the section type, which is equivalent to a the index of a <see cref="T:C1.Win.C1Report.Section" /> object
            in the control's <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection. 
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Field.Section" /> and 
            <see cref="P:C1.Win.C1Report.Section.Type" /> properties.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.Undefined">
      <summary>
            Undefined. This setting indicates the field doesn't belong to any sections and should not be rendered.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.Detail">
      <summary>
            Detail section: repeated for every record in the source recordset.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.Header">
      <summary>
            Report header section: appears once, in the beginning of the report.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.Footer">
      <summary>
            Report footer section: appears once, in the end of the report.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.PageHeader">
      <summary>
            Page header section: appears at the top of every page, subject to the setting of the 
            <see cref="P:C1.Win.C1Report.Layout.PageHeader" /> property.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.PageFooter">
      <summary>
            Page footer section: appears at the bottom of every page, subject to the setting of the 
            <see cref="P:C1.Win.C1Report.Layout.PageFooter" /> property.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader1">
      <summary>
            Group header section: appears before level-one groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter1">
      <summary>
            Group footer section: appears after level-one groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader2">
      <summary>
            Group header section: appears before level-two groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter2">
      <summary>
            Group footer section: appears after level-two groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader3">
      <summary>
            Group header section: appears before level-three groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter3">
      <summary>
            Group footer section: appears after level-three groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupHeader4">
      <summary>
            Group header section: appears before level-four groups.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.SectionTypeEnum.GroupFooter4">
      <summary>
            Group footer section: appears after level-four groups.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.ForcePageBreakEnum">
      <summary>
            Determines whether page breaks should be inserted before or after a field or section.
            </summary>
      <remarks>Use the members of this enumeration to set the value of the <see cref="P:C1.Win.C1Report.Field.ForcePageBreak" /> and 
            <see cref="P:C1.Win.C1Report.Section.ForcePageBreak" /> properties in the <see cref="T:C1.Win.C1Report.Field" /> and <see cref="T:C1.Win.C1Report.Section" /> classes.
            </remarks>
    </member>
    <member name="F:C1.Win.C1Report.ForcePageBreakEnum.None">
      <summary>
            No page breaks.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ForcePageBreakEnum.Before">
      <summary>
            A page break is inserted before the field or section.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ForcePageBreakEnum.After">
      <summary>
            A page break is inserted after the field or section.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ForcePageBreakEnum.BeforeAndAfter">
      <summary>
            Page breaks are inserted before and after the field or section.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ForcePageBreakEnum.PageBefore">
      <summary>
            In multi-column reports, a page break is inserted before the field or section instead of column break.
            </summary>
    </member>
    <member name="F:C1.Win.C1Report.ForcePageBreakEnum.PageAfter">
      <summary>
            In multi-column reports, a page break is inserted after the field or section instead of column break.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Section">
      <summary>
            Represents a report band.
            </summary>
      <remarks>
        <para>Each <b>Section</b> object contains a collection of fields objects that display individual data items 
            within the section.</para>
        <para>Every report contains the following sections:</para>
        <para>A <b>detail</b> section.</para>
        <para>A <b>report header</b> and a <b>report footer</b> section.</para>
        <para>A <b>page header</b> and a <b>page footer</b> section.</para>
        <para>A <b>group header</b> and a <b>group footer</b> section for each <see cref="T:C1.Win.C1Report.Group" /> object in the report.</para>
        <para>The total number of sections in a report is therefore <code>5 + 2 * Groups.Count</code>. Sections cannot
            be added and removed from reports directly. The number of sections is a function of the number of groups.</para>
        <para>Although sections cannot be removed, they can be hidden by setting their <see cref="P:C1.Win.C1Report.Section.Visible" /> property
            to false.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.Name">
      <summary>
            Gets or sets the <see cref="T:C1.Win.C1Report.Section" /> name.
            </summary>
      <remarks>
        <para>The section name can be used as an index into the control's <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.</para>
        <para>Section names are also used to identify fields in <b>VBScript</b> expressions.</para>
        <para>Duplicate and empty section names are allowed, but should be avoided if you plan to use the section names 
            in scripts or as indexers.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.Visible">
      <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section" /> will be rendered in the report.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Section.Type">
      <summary>
            Returns the <see cref="T:C1.Win.C1Report.Section" /> type (e.g., PageHeader, Detail).
            </summary>
      <seealso cref="T:C1.Win.C1Report.SectionTypeEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Section.Fields">
      <summary>
            Returns a collection of all fields in this <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
      <remarks>
        <para>The <b>Fields</b> collection contains all <see cref="T:C1.Win.C1Report.Field" /> objects defined in the current section.</para>
        <para>When you add a field to a section's <b>Fields</b> collection, the field is automatically assigned to the 
            section that owns the collection. For example, the code below adds a field to the <b>Detail</b> section:</para>
        <code>
            _c1r.Sections.Detail.Fields.Add("new field", "CompanyLogo", rc);
            </code>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.Tag">
      <summary>
            Gets or sets extra data used by the calling program.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Section.ParentReport">
      <summary>
            Gets the <see cref="T:C1.Win.C1Report.C1Report" /> object that contains this <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Section.Height">
      <summary>
            Gets or sets the <see cref="T:C1.Win.C1Report.Section" /> height, in twips.
            </summary>
      <remarks>
        <para>The height of a section should be large enough to accommodate all fields in the section.</para>
        <para>The Report Designer automatically adjusts section heights when fields are added, moved, or resized.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.RenderHeight">
      <summary>
            Returns the height of the section after the <see cref="P:C1.Win.C1Report.Section.CanGrow" /> and <see cref="P:C1.Win.C1Report.Section.CanShrink" /> 
            properties have been applied to the section.
            </summary>
      <remarks>
        <para>When a section grows or shrinks, its <see cref="P:C1.Win.C1Report.Section.Height" /> property does not change.</para>
        <para>If you need to retrieve the actual height that will be used for rendering the section 
            (for example, while handling the <see cref="P:C1.Win.C1Report.Section.OnPrint" /> event), use the <see cref="P:C1.Win.C1Report.Section.RenderHeight" /> 
            property instead.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.KeepTogether">
      <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section" /> should be kept together on a page.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.Win.C1Report.Group" /> and <see cref="T:C1.Win.C1Report.Field" /> objects also have <b>KeepTogether</b> properties.</para>
        <para>The <see cref="T:C1.Win.C1Report.Group" /> object's <see cref="P:C1.Win.C1Report.Group.KeepTogether" /> property works across sections. 
            It determines whether group headers should be kept together with their first detail section or whether entire 
            groups should be kept together on a page.</para>
        <para>The <see cref="T:C1.Win.C1Report.Field" /> object's <see cref="P:C1.Win.C1Report.Field.KeepTogether" /> property determines whether the
            field should be rendered on a single page or whether it is allowed to be split across page breaks.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.ForcePageBreak">
      <summary>
            Specifies whether page breaks should be inserted before and/or after the section is rendered.
            </summary>
      <seealso cref="T:C1.Win.C1Report.ForcePageBreakEnum" />
    </member>
    <member name="P:C1.Win.C1Report.Section.CanGrow">
      <summary>
            Specifies whether the Section height should be automatically increased to fit its contents.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.Win.C1Report.Section.CanGrow" /> and <see cref="P:C1.Win.C1Report.Section.CanShrink" /> properties to control the 
            appearance of report sections and fields.</para>
        <para>For example, if you set both properties to true, a section or field automatically adjusts 
            vertically to print or preview all the data it contains.</para>
        <para>Sections grow and shrink vertically across their entire width.</para>
        <para>When a section grows or shrinks, its <see cref="P:C1.Win.C1Report.Section.Height" /> property does not change. 
            To retrieve the actual rendering height, use the <see cref="P:C1.Win.C1Report.Section.RenderHeight" /> property.</para>
        <para>You can make fields grow or shrink to match the size of the section by setting their 
            <see cref="P:C1.Win.C1Report.Field.Anchor" /> property.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.CanShrink">
      <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section" /> height should be reduced when one or more fields shrink.
            </summary>
      <remarks>
        <para>You can use the <see cref="P:C1.Win.C1Report.Section.CanGrow" /> and <see cref="P:C1.Win.C1Report.Section.CanShrink" /> properties to control the layout of 
            report sections and fields.</para>
        <para>For example, if you set both properties to true, a section or field automatically adjusts vertically 
            to print or preview all the data it contains.</para>
        <para>When a section grows or shrinks, its <see cref="P:C1.Win.C1Report.Section.Height" /> property does not change. To retrieve the 
            actual (adjusted) height, use the <see cref="P:C1.Win.C1Report.Section.RenderHeight" /> property.</para>
        <para>You can make fields grow or shrink to match the size of the section by setting their <see cref="P:C1.Win.C1Report.Field.Anchor" /> 
            property.</para>
      </remarks>
      <seealso cref="P:C1.Win.C1Report.Section.CanGrow" />
    </member>
    <member name="P:C1.Win.C1Report.Section.Repeat">
      <summary>
            Specifies whether the <see cref="T:C1.Win.C1Report.Section" /> should be repeated at the top of every page.
            </summary>
      <remarks>
        <para>This property only applies to group header sections.</para>
        <para>Set this value to true to repeat the group header page at the top of every page, before the detail sections.</para>
        <para>If you have multiple groups, all group header sections that have the <b>Repeat</b> property set to true will 
            be rendered at the top of each page.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.BackColor">
      <summary>
            Gets or sets the background color for this <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Section.OnFormat">
      <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.Win.C1Report.Section" /> is formatted.
            </summary>
      <remarks>
        <para>This property contains <b>VBScript</b> instructions to be executed before the fields in the section 
            are calculated. When this script is executed, the recordset already holds the data that will be displayed 
            in the section, but the field values have not been updated yet.</para>
        <para>Use this event to assign values to fields before they are calculated, so the new values will be taken 
            into account when the control calculates the field's size and position when the <see cref="P:C1.Win.C1Report.Section.CanGrow" /> or 
            <see cref="P:C1.Win.C1Report.Section.CanShrink" /> properties are set to true.</para>
        <para>If you want to set field properties based on the field's current value, use the <see cref="P:C1.Win.C1Report.Section.OnPrint" /> 
            property instead.</para>
      </remarks>
    </member>
    <member name="P:C1.Win.C1Report.Section.OnPrint">
      <summary>
            Gets or sets a string containing <b>VBScript</b> code to be executed before the <see cref="T:C1.Win.C1Report.Section" /> is printed 
            (after it is formatted).
            </summary>
      <remarks>
            This property contains <b>VBScript</b> instructions that get executed after the fields in the section 
            have been calculated.
            </remarks>
    </member>
    <member name="T:C1.Win.C1Report.SectionCollection">
      <summary>
            Collection of the <see cref="T:C1.Win.C1Report.Section" /> objects. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.SectionCollection.CopyTo(C1.Win.C1Report.Section[],System.Int32)">
      <summary>
            Copies the elements of the collection to an <see cref="T:System.Array" />, starting at a particular array index.
            </summary>
      <param name="array">The one-dimensional <see cref="T:System.Array" /> that is the destination of the elements 
            copied from collection. (The array must have zero-based indexing).</param>
      <param name="index">The zero-based index in array at which copying begins.</param>
    </member>
    <member name="M:C1.Win.C1Report.SectionCollection.Contains(C1.Win.C1Report.Section)">
      <summary>
            Determines whether the collection contains a specific <see cref="T:C1.Win.C1Report.Section" />.
            </summary>
      <param name="s">The <see cref="T:C1.Win.C1Report.Section" /> object.</param>
      <returns>True if the collection contains specified section; false otherwise.</returns>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Item(System.Int32)">
      <summary>
            Returns a section from a <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.
            </summary>
      <remarks>
            The index parameter may be an integer between zero and <see cref="P:C1.Win.C1Report.SectionCollection.Count" />-1.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Item(C1.Win.C1Report.SectionTypeEnum)">
      <summary>
            Returns a section from a <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Item(System.String)">
      <summary>
            Returns a section from a <see cref="P:C1.Win.C1Report.C1Report.Sections" /> collection.
            </summary>
      <remarks>
            The name parameter may be a string containing a section name.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Detail">
      <summary>
            Returns a reference to the detail section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Detail].
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Header">
      <summary>
            Returns a reference to the report header section. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Header]
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Footer">
      <summary>
            Returns a reference to the report footer section. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.Footer].
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.PageHeader">
      <summary>
            Returns a reference to the page header section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.PageHeader].
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.PageFooter">
      <summary>
            Returns a reference to the page footer section of the report. 
            </summary>
      <remarks>
            This property is equivalent to this[SectionTypeEnum.PageFooter].
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.SectionCollection.Count">
      <summary>
            Returns the number of elements in the collection.
            </summary>
      <remarks>
        <para>The <see cref="T:C1.Win.C1Report.SectionCollection" /> class does not have <b>Add</b> or <b>Remove</b> methods.</para>
        <para>That is because the number of sections in a report is determined by then number of groups. 
            To add or remove sections from the report, you need to add or remove groups.</para>
      </remarks>
    </member>
    <member name="T:C1.Win.C1Report.Util.FontHolder">
      <summary>
            Encapsulates a <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> object and provides get/set access to the font properties. 
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.Util.FontHolder.#ctor(System.Drawing.Font)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.Util.FontHolder" /> class.
            </summary>
      <param name="font">The <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> object used to initialize the <b>FontHolder</b>.</param>
    </member>
    <member name="M:C1.Win.C1Report.Util.FontHolder.ToString">
      <summary>
            Gets a string that represents this <see cref="T:C1.Win.C1Report.Util.FontHolder" />.
            </summary>
      <returns>A string that represents this <see cref="T:C1.Win.C1Report.Util.FontHolder" />.</returns>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.Name">
      <summary>
            Gets or sets the name of the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.Size">
      <summary>
            Gets or sets the <see cref="P:System.Drawing.Font.Size" /> of the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> object.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.Bold">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> is bold.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.Italic">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> is italic.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.Underline">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> is underlined.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.Strikethrough">
      <summary>
            Gets or sets a value that indicates whether the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" /> has a horizontal line
            through the text.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.FontHolder.GdiCharSet">
      <summary>
            Gets or sets the GDI character set used by the encapsulated <see cref="P:C1.Win.C1Report.Util.FontHolder.Font" />.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Util.PictureHolder">
      <summary>
            Encapsulates an <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image" /> object and provides methods for loading images from 
            image files or from binary database fields.
            </summary>
      <remarks>
            A <see cref="T:C1.Win.C1Report.Util.PictureHolder" /> object may contain an unbound image (from a file or URL),
            or the name of a database field that contains images.</remarks>
    </member>
    <member name="M:C1.Win.C1Report.Util.PictureHolder.ToString">
      <summary>
            Gets a string that represents this <see cref="T:C1.Win.C1Report.Util.PictureHolder" />.
            </summary>
      <returns>A string that represents this <see cref="T:C1.Win.C1Report.Util.PictureHolder" />.</returns>
    </member>
    <member name="P:C1.Win.C1Report.Util.PictureHolder.IsBound">
      <summary>
            Gets a value that indicates whether this <see cref="T:C1.Win.C1Report.Util.PictureHolder" /> is bound to a database field that contains images.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.PictureHolder.IsUrl">
      <summary>
            Gets a value that indicates whether this <see cref="T:C1.Win.C1Report.Util.PictureHolder" /> contains an image URL.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.PictureHolder.IsEmpty">
      <summary>
            Gets a value that indicates whether this <see cref="T:C1.Win.C1Report.Util.PictureHolder" /> is empty.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.PictureHolder.FieldName">
      <summary>
            Gets the name of the database field from which this <see cref="T:C1.Win.C1Report.Util.PictureHolder" /> will load images.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.PictureHolder.Image">
      <summary>
            Gets the <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image" /> loaded by this <see cref="T:C1.Win.C1Report.Util.PictureHolder" />.
            </summary>
    </member>
    <member name="P:C1.Win.C1Report.Util.PictureHolder.Url">
      <summary>
            Gets the URL that contains the <see cref="P:C1.Win.C1Report.Util.PictureHolder.Image" /> loaded by this <see cref="T:C1.Win.C1Report.Util.PictureHolder" />.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.Util.Styles.Style">
      <summary>
            Style contains a collection of arbitrary attributes, 
            represented by a name/object entry, a reference to a parent
            Style, and a reference to the containing StyleContext.
            </summary>
    </member>
    <member name="T:C1.Win.C1Report.XlsFilter">
      <summary>
            Class used with the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" />method to render reports into Microsoft Excel (XLS) files. 
            </summary>
      <remarks>
            Creating an <b>XlsFilter</b> and using it in a call to the <see cref="M:C1.Win.C1Report.C1Report.RenderToFilter(C1.Win.C1Report.ExportFilter)" /> method is similar 
            to using the <see cref="M:C1.Win.C1Report.C1Report.RenderToFile(System.String,C1.Win.C1Report.FileFormatEnum)" /> method, but offers some extra flexibility because you can set 
            properties on the <b>XlsFilter</b> before calling <b>RenderToFilter</b>.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.#ctor(System.String)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.XlsFilter" /> class attached to a file.
            </summary>
      <param name="fileName">Full name of the file to be created.</param>
      <remarks>
            If the file already exists, the filter will open it and will add a new sheet with the report.
            </remarks>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.#ctor(System.IO.Stream)">
      <summary>
            Initializes a new instance of the <see cref="T:C1.Win.C1Report.XlsFilter" /> class attached to a <see cref="T:System.IO.Stream" />.
            </summary>
      <param name="stream">
        <see cref="T:System.IO.Stream" /> where the sheet will be saved.</param>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.StartReport(C1.Win.C1Report.C1Report)">
      <summary>
            Called when the component starts rendering a report.
            </summary>
      <param name="report">Owner report.</param>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.IsPaged">
      <summary>
            Determines whether this filter generates single or multi-page reports.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.UsesImages">
      <summary>
            Returns a value that determines whether the filter uses page images.
            </summary>
      <returns>Always returns false.</returns>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.RenderField(C1.Win.C1Report.Field,System.Drawing.Rectangle,System.String,System.Drawing.Image)">
      <summary>
            Called when the component needs to render a report field with specific content at a specific 
            position on the current page.
            </summary>
      <param name="field">
        <see cref="T:C1.Win.C1Report.Field" /> object to render.</param>
      <param name="rc">Rectangle that determines the field position on the page, in twips.</param>
      <param name="text">Field text to render.</param>
      <param name="img">Field image to render.</param>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.EndReport">
      <summary>
            Called when the component finishes rendering a report.
            </summary>
    </member>
    <member name="M:C1.Win.C1Report.XlsFilter.Dispose">
      <summary>
            Called when the component finishes rendering a report, or when the rendering 
            process is canceled by the user or interrupted by an error. 
            </summary>
      <remarks>
            Use this method to free any disposable objects used by the filter.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.XlsFilter.SheetName">
      <summary>
            Gets or sets the name of the worksheet to be used when saving the report into the Excel workbook file.
            </summary>
      <remarks>
            You can use this property to save multiple reports into a single Excel workbook file, one on each sheet.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.XlsFilter.Shading">
      <summary>
            Gets or sets a value that determines whether cells should be shaded in the Excel workbook file.
            </summary>
      <remarks>
            Set this property to false to create smaller files without any cell shading.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.XlsFilter.Images">
      <summary>
            Gets or sets a value that determines whether images should be exported to the Excel workbook file.
            </summary>
      <remarks>
            Set this property to false to create smaller files without any images.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.XlsFilter.FreezePageHeader">
      <summary>
            Gets or sets a value that determines whether header sections should be frozen on the sheet.
            </summary>
      <remarks>
            Set this property to true to freeze rows that contain the ReportHeader and PageHeader sections.
            Frozen rows remain visible when the user scrolls the sheet.
            </remarks>
    </member>
    <member name="P:C1.Win.C1Report.XlsFilter.OpenXml">
      <summary>
            Gets or sets whether to export the file using the OpenXml format used by Microsoft Excel 2007 and later.
            </summary>
    </member>
  </members>
</doc>